<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Thu Sep 05 16:00:12 EDT 2013 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="Google OAuth Client Library for Java 1.17.0-rc"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /usr/local/google/home/ngmiceli/tools/jdiff-1.1.1/jdiff.jar:/usr/local/google/home/ngmiceli/tools/jdiff-1.1.1/xerces.jar -d /tmp/release-java-1.17.0-rc-projects-uB6Yg0/javadoc/google-oauth-java-client/1.17.0-rc/jdiff -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/xercesImpl.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-apache-xalan2.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/junit.jar:/usr/share/ant/lib/ant-junit4.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/local/buildtools/java/jdk7-google-v5-32/lib/tools.jar -sourcepath /tmp/release-java-1.17.0-rc-projects-uB6Yg0/google-oauth-java-client/google-oauth-client-java6/src/main/java:/tmp/release-java-1.17.0-rc-projects-uB6Yg0/google-oauth-java-client/google-oauth-client-servlet/src/main/java:/tmp/release-java-1.17.0-rc-projects-uB6Yg0/google-oauth-java-client/google-oauth-client/src/main/java:/tmp/release-java-1.17.0-rc-projects-uB6Yg0/google-oauth-java-client/google-oauth-client-jetty/src/main/java:/tmp/release-java-1.17.0-rc-projects-uB6Yg0/google-oauth-java-client/google-oauth-client-appengine/src/main/java -apiname Google OAuth Client Library for Java 1.17.0-rc -baseURI http://www.w3.org -apidir /tmp/release-java-1.17.0-rc-projects-uB6Yg0/javadoc/google-oauth-java-client/1.17.0-rc/jdiff -source 1.5 -->
<package name="com.google.api.client.auth.oauth">
  <!-- start class com.google.api.client.auth.oauth.AbstractOAuthGetToken -->
  <class name="AbstractOAuthGetToken" extends="GenericUrl"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractOAuthGetToken" type="java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerUrl encoded authorization server URL]]>
      </doc>
    </constructor>
    <method name="execute" return="com.google.api.client.auth.oauth.OAuthCredentialsResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes the HTTP request for a temporary or long-lived token.

 @return OAuth credentials response object]]>
      </doc>
    </method>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of the OAuth authentication provider. Subclasses may override by calling
 this super implementation and then adding OAuth parameters.]]>
      </doc>
    </method>
    <field name="transport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for executing request in {@link #execute()}.

 @since 1.3]]>
      </doc>
    </field>
    <field name="consumerKey" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required identifier portion of the client credentials (equivalent to a username).]]>
      </doc>
    </field>
    <field name="signer" type="com.google.api.client.auth.oauth.OAuthSigner"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required OAuth signature algorithm.]]>
      </doc>
    </field>
    <field name="usePost" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code true} for POST request or the default {@code false} for GET request.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Generic OAuth 1.0a URL to request a temporary or long-lived token from an authorization server.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.AbstractOAuthGetToken -->
  <!-- start class com.google.api.client.auth.oauth.OAuthAuthorizeTemporaryTokenUrl -->
  <class name="OAuthAuthorizeTemporaryTokenUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthAuthorizeTemporaryTokenUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUserAuthorizationUrl encoded user authorization URL]]>
      </doc>
    </constructor>
    <field name="temporaryToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The temporary credentials token obtained from temporary credentials request in the
 "oauth_token" parameter. It is found in the {@link OAuthCredentialsResponse#token} returned by
 {@link OAuthGetTemporaryToken#execute()}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth 1.0a URL builder for an authorization web page to allow the end user to authorize the
 temporary token.
 <p>
 The {@link #temporaryToken} should be set from the {@link OAuthCredentialsResponse#token}
 returned by {@link OAuthGetTemporaryToken#execute()}. Use {@link #build()} to build the
 authorization URL. If a {@link OAuthGetTemporaryToken#callback} was specified, after the end user
 grants the authorization, the authorization server will redirect to that callback URL. To parse
 the response, use {@link OAuthCallbackUrl}.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthAuthorizeTemporaryTokenUrl -->
  <!-- start class com.google.api.client.auth.oauth.OAuthCallbackUrl -->
  <class name="OAuthCallbackUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthCallbackUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The temporary credentials identifier received from the client.]]>
      </doc>
    </field>
    <field name="verifier" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The verification code.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Generic URL that parses the callback URL after a temporary token has been authorized by the end
 user.
 <p>
 The {@link #verifier} is required in order to exchange the authorized temporary token for a
 long-lived access token in {@link OAuthGetAccessToken#verifier}.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthCallbackUrl -->
  <!-- start class com.google.api.client.auth.oauth.OAuthCredentialsResponse -->
  <class name="OAuthCredentialsResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthCredentialsResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Credentials token.]]>
      </doc>
    </field>
    <field name="tokenSecret" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Credentials shared-secret for use with {@code "HMAC-SHA1"} signature algorithm. Used for
 {@link OAuthHmacSigner#tokenSharedSecret}.]]>
      </doc>
    </field>
    <field name="callbackConfirmed" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "true"} for temporary credentials request or {@code null} for a token credentials
 request. The parameter is used to differentiate from previous versions of the protocol.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Data to parse a success response to a request for temporary or token credentials.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthCredentialsResponse -->
  <!-- start class com.google.api.client.auth.oauth.OAuthGetAccessToken -->
  <class name="OAuthGetAccessToken" extends="com.google.api.client.auth.oauth.AbstractOAuthGetToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthGetAccessToken" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerUrl encoded authorization server URL]]>
      </doc>
    </constructor>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="temporaryToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required temporary token. It is retrieved from the {@link OAuthCredentialsResponse#token}
 returned from {@link OAuthGetTemporaryToken#execute()}.]]>
      </doc>
    </field>
    <field name="verifier" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required verifier code received from the server when the temporary token was authorized. It is
 retrieved from {@link OAuthCallbackUrl#verifier}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Generic OAuth 1.0a URL to request to exchange the temporary credentials token (or "request
 token") for a long-lived credentials token (or "access token") from an authorization server.
 <p>
 Use {@link #execute()} to execute the request. The long-lived access token acquired with this
 request is found in {@link OAuthCredentialsResponse#token} . This token must be stored. It may
 then be used to authorize HTTP requests to protected resources by using {@link OAuthParameters}.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthGetAccessToken -->
  <!-- start class com.google.api.client.auth.oauth.OAuthGetTemporaryToken -->
  <class name="OAuthGetTemporaryToken" extends="com.google.api.client.auth.oauth.AbstractOAuthGetToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthGetTemporaryToken" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerUrl encoded authorization server URL]]>
      </doc>
    </constructor>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="callback" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional absolute URI back to which the server will redirect the resource owner when the
 Resource Owner Authorization step is completed or {@code null} for none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Generic OAuth 1.0a URL to request a temporary credentials token (or "request token") from an
 authorization server.
 <p>
 Use {@link #execute()} to execute the request. The temporary token acquired with this request is
 found in {@link OAuthCredentialsResponse#token}. This temporary token is used in
 {@link OAuthAuthorizeTemporaryTokenUrl#temporaryToken} to direct the end user to an authorization
 page to allow the end user to authorize the temporary token.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthGetTemporaryToken -->
  <!-- start class com.google.api.client.auth.oauth.OAuthHmacSigner -->
  <class name="OAuthHmacSigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.auth.oauth.OAuthSigner"/>
    <constructor name="OAuthHmacSigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSignatureMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="computeSignature" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureBaseString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
    </method>
    <field name="clientSharedSecret" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Client-shared secret or {@code null} for none.]]>
      </doc>
    </field>
    <field name="tokenSharedSecret" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token-shared secret or {@code null} for none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth {@code "HMAC-SHA1"} signature method.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthHmacSigner -->
  <!-- start class com.google.api.client.auth.oauth.OAuthParameters -->
  <class name="OAuthParameters" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthParameters"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="computeNonce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Computes a nonce based on the hex string of a random non-negative long, setting the value of
 the {@link #nonce} field.]]>
      </doc>
    </method>
    <method name="computeTimestamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Computes a timestamp based on the current system time, setting the value of the
 {@link #timestamp} field.]]>
      </doc>
    </method>
    <method name="computeSignature"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestMethod" type="java.lang.String"/>
      <param name="requestUrl" type="GenericUrl"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Computes a new signature based on the fields and the given request method and URL, setting the
 values of the {@link #signature} and {@link #signatureMethod} fields.

 @throws GeneralSecurityException general security exception]]>
      </doc>
    </method>
    <method name="getAuthorizationHeader" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code Authorization} header value to use with the OAuth parameter values found in
 the fields.]]>
      </doc>
    </method>
    <method name="escape" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the escaped form of the given value using OAuth escaping rules.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="signer" type="com.google.api.client.auth.oauth.OAuthSigner"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required OAuth signature algorithm.]]>
      </doc>
    </field>
    <field name="callback" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Absolute URI back to which the server will redirect the resource owner when the Resource Owner
 Authorization step is completed.]]>
      </doc>
    </field>
    <field name="consumerKey" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required identifier portion of the client credentials (equivalent to a username).]]>
      </doc>
    </field>
    <field name="nonce" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required nonce value. Should be computed using {@link #computeNonce()}.]]>
      </doc>
    </field>
    <field name="realm" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Realm.]]>
      </doc>
    </field>
    <field name="signature" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Signature. Required but normally computed using {@link #computeSignature}.]]>
      </doc>
    </field>
    <field name="signatureMethod" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the signature method used by the client to sign the request. Required, but normally
 computed using {@link #computeSignature}.]]>
      </doc>
    </field>
    <field name="timestamp" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required timestamp value. Should be computed using {@link #computeTimestamp()}.]]>
      </doc>
    </field>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token value used to associate the request with the resource owner or {@code null} if the
 request is not associated with a resource owner.]]>
      </doc>
    </field>
    <field name="verifier" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The verification code received from the server.]]>
      </doc>
    </field>
    <field name="version" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Must either be "1.0" or {@code null} to skip. Provides the version of the authentication
 process as defined in this specification.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth 1.0a parameter manager.
 <p>
 The only required non-computed fields are {@link #signer} and {@link #consumerKey}. Use
 {@link #token} to specify token or temporary credentials.

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    OAuthParameters parameters = new OAuthParameters();
    // ...
    return transport.createRequestFactory(parameters);
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthParameters -->
  <!-- start class com.google.api.client.auth.oauth.OAuthRsaSigner -->
  <class name="OAuthRsaSigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.auth.oauth.OAuthSigner"/>
    <constructor name="OAuthRsaSigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSignatureMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="computeSignature" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureBaseString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
    </method>
    <field name="privateKey" type="java.security.PrivateKey"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Private key.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth {@code "RSA-SHA1"} signature method.

 <p>
 The private key may be loaded using the utilities in {@link SecurityUtils}.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthRsaSigner -->
  <!-- start interface com.google.api.client.auth.oauth.OAuthSigner -->
  <interface name="OAuthSigner"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSignatureMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the signature method.]]>
      </doc>
    </method>
    <method name="computeSignature" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureBaseString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns the signature computed from the given signature base string.

 @throws GeneralSecurityException general security exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth signature method.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.auth.oauth.OAuthSigner -->
</package>
<package name="com.google.api.client.auth.oauth2">
  <!-- start class com.google.api.client.auth.oauth2.AuthorizationCodeFlow -->
  <class name="AuthorizationCodeFlow" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationCodeFlow" type="com.google.api.client.auth.oauth2.Credential.AccessMethod, HttpTransport, JsonFactory, GenericUrl, HttpExecuteInterceptor, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param method method of presenting the access token to the resource server (for example
        {@link BearerToken#authorizationHeaderAccessMethod})
 @param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param clientAuthentication client authentication or {@code null} for none (see
        {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)})
 @param clientId client identifier
 @param authorizationServerEncodedUrl authorization server encoded URL

 @since 1.14]]>
      </doc>
    </constructor>
    <constructor name="AuthorizationCodeFlow" type="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder authorization code flow builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="newAuthorizationUrl" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an authorization code request URL.

 <p>
 This is a builder for an authorization web page to allow the end user to authorize the
 application to access their protected resources and that returns an authorization code. It uses
 the {@link #getAuthorizationServerEncodedUrl()}, {@link #getClientId()}, and
 {@link #getScopes()}. Sample usage:
 </p>

 <pre>
  private AuthorizationCodeFlow flow;

  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url = flow.newAuthorizationUrl().setState("xyz")
        .setRedirectUri("https://client.example.com/rd").build();
    response.sendRedirect(url);
  }
 </pre>]]>
      </doc>
    </method>
    <method name="newTokenRequest" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationCode" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a new instance of an authorization code token request based on the given authorization
 code.

 <p>
 This is used to make a request for an access token using the authorization code. It uses
 {@link #getTransport()}, {@link #getJsonFactory()}, {@link #getTokenServerEncodedUrl()},
 {@link #getClientAuthentication()}, {@link #getRequestInitializer()}, and {@link #getScopes()}.
 </p>

 <pre>
  static TokenResponse requestAccessToken(AuthorizationCodeFlow flow, String code)
      throws IOException, TokenResponseException {
    return flow.newTokenRequest(code).setRedirectUri("https://client.example.com/rd").execute();
  }
 </pre>

 @param authorizationCode authorization code.]]>
      </doc>
    </method>
    <method name="createAndStoreCredential" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.auth.oauth2.TokenResponse"/>
      <param name="userId" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new credential for the given user ID based on the given token response and store in
 the credential store.

 @param response token response
 @param userId user ID or {@code null} if not using a persisted credential store
 @return newly created credential]]>
      </doc>
    </method>
    <method name="loadCredential" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the credential of the given user ID from the credential store.

 @param userId user ID or {@code null} if not using a persisted credential store
 @return credential found in the credential store of the given user ID or {@code null} for none
         found]]>
      </doc>
    </method>
    <method name="getMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the method of presenting the access token to the resource server (for example
 {@link BearerToken#authorizationHeaderAccessMethod}).]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getTokenServerEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token server encoded URL.]]>
      </doc>
    </method>
    <method name="getClientAuthentication" return="HttpExecuteInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client authentication or {@code null} for none (see
 {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)}).]]>
      </doc>
    </method>
    <method name="getClientId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client identifier.]]>
      </doc>
    </method>
    <method name="getAuthorizationServerEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization server encoded URL.]]>
      </doc>
    </method>
    <method name="getCredentialStore" return="com.google.api.client.auth.oauth2.CredentialStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="(to be removed in the future) Use {@link #getCredentialDataStore()} instead.">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the credential persistence store or {@code null} for none.
 @deprecated (to be removed in the future) Use {@link #getCredentialDataStore()} instead.]]>
      </doc>
    </method>
    <method name="getCredentialDataStore" return="&lt;any&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the stored credential data store or {@code null} for none.

 @since 1.16]]>
      </doc>
    </method>
    <method name="getRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getScopesAsString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the space-separated list of scopes.

 @since 1.15]]>
      </doc>
    </method>
    <method name="getScopes" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the a collection of scopes.]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock which will be passed along to the Credential.
 @since 1.9]]>
      </doc>
    </method>
    <method name="getRefreshListeners" return="java.util.Collection&lt;com.google.api.client.auth.oauth2.CredentialRefreshListener&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the unmodifiable list of listeners for refresh token results.

 @since 1.15]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe OAuth 2.0 authorization code flow that manages and persists end-user credentials.

 <p>
 This is designed to simplify the flow in which an end-user authorizes the application to access
 their protected data, and then the application has access to their data based on an access token
 and a refresh token to refresh that access token when it expires.
 </p>

 <p>
 The first step is to call {@link #loadCredential(String)} based on the known user ID to check if
 the end-user's credentials are already known. If not, call {@link #newAuthorizationUrl()} and
 direct the end-user's browser to an authorization page. The web browser will then redirect to the
 redirect URL with a {@code "code"} query parameter which can then be used to request an access
 token using {@link #newTokenRequest(String)}. Finally, use
 {@link #createAndStoreCredential(TokenResponse, String)} to store and obtain a credential for
 accessing protected resources.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.AuthorizationCodeFlow -->
  <!-- start class com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder -->
  <class name="AuthorizationCodeFlow.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationCodeFlow.Builder" type="com.google.api.client.auth.oauth2.Credential.AccessMethod, HttpTransport, JsonFactory, GenericUrl, HttpExecuteInterceptor, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param method method of presenting the access token to the resource server (for example
        {@link BearerToken#authorizationHeaderAccessMethod})
 @param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param clientAuthentication client authentication or {@code null} for none (see
        {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)})
 @param clientId client identifier
 @param authorizationServerEncodedUrl authorization server encoded URL]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an authorization code flow based on this builder.]]>
      </doc>
    </method>
    <method name="getMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the method of presenting the access token to the resource server (for example
 {@link BearerToken#authorizationHeaderAccessMethod}).]]>
      </doc>
    </method>
    <method name="setMethod" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="com.google.api.client.auth.oauth2.Credential.AccessMethod"/>
      <doc>
      <![CDATA[Sets the method of presenting the access token to the resource server (for example
 {@link BearerToken#authorizationHeaderAccessMethod}).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="setTransport" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[Sets the HTTP transport.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <doc>
      <![CDATA[Sets the JSON factory.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getTokenServerUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token server URL.]]>
      </doc>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[Sets the token server URL.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getClientAuthentication" return="HttpExecuteInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client authentication or {@code null} for none (see
 {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)}).]]>
      </doc>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
      <doc>
      <![CDATA[Sets the client authentication or {@code null} for none (see
 {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)}).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getClientId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client identifier.]]>
      </doc>
    </method>
    <method name="setClientId" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client identifier.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getAuthorizationServerEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization server encoded URL.]]>
      </doc>
    </method>
    <method name="setAuthorizationServerEncodedUrl" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationServerEncodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authorization server encoded URL.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.11]]>
      </doc>
    </method>
    <method name="getCredentialStore" return="com.google.api.client.auth.oauth2.CredentialStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="(to be removed in the future) Use {@link #getCredentialDataStore()} instead.">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the credential persistence store or {@code null} for none.
 @deprecated (to be removed in the future) Use {@link #getCredentialDataStore()} instead.]]>
      </doc>
    </method>
    <method name="getCredentialDataStore" return="&lt;any&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the stored credential data store or {@code null} for none.

 @since 1.16]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock passed along to the Credential or {@link Clock#SYSTEM} when system default
 is used.
 @since 1.9]]>
      </doc>
    </method>
    <method name="setClock" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[Sets the clock to pass to the Credential.

 <p>
 The default value for this parameter is {@link Clock#SYSTEM}
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>
 @since 1.9]]>
      </doc>
    </method>
    <method name="setCredentialStore" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(to be removed in the future) Use
             {@link #setDataStoreFactory(DataStoreFactory)} or
             {@link #setCredentialDataStore(DataStore)} instead.">
      <param name="credentialStore" type="com.google.api.client.auth.oauth2.CredentialStore"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the credential persistence store or {@code null} for none.

 <p>
 Warning: not compatible with {@link #setDataStoreFactory} or {@link #setCredentialDataStore},
 and if either of those is called before this method is called, this method will throw an
 {@link IllegalArgumentException}.
 </p>

 </p>
 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @deprecated (to be removed in the future) Use
             {@link #setDataStoreFactory(DataStoreFactory)} or
             {@link #setCredentialDataStore(DataStore)} instead.]]>
      </doc>
    </method>
    <method name="setDataStoreFactory" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataStoreFactory" type="DataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the data store factory or {@code null} for none.

 <p>
 Warning: not compatible with {@link #setCredentialStore}, and if it is called before this
 method is called, this method will throw an {@link IllegalArgumentException}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.16]]>
      </doc>
    </method>
    <method name="setCredentialDataStore" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credentialDataStore" type="&lt;any&gt;"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the stored credential data store or {@code null} for none.

 <p>
 Warning: not compatible with {@link #setCredentialStore}, and if it is called before this
 method is called, this method will throw an {@link IllegalArgumentException}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.16]]>
      </doc>
    </method>
    <method name="getRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Sets the HTTP request initializer or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the collection of scopes.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param scopes collection of scopes
 @since 1.15]]>
      </doc>
    </method>
    <method name="getScopes" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a collection of scopes.]]>
      </doc>
    </method>
    <method name="setCredentialCreatedListener" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credentialCreatedListener" type="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.CredentialCreatedListener"/>
      <doc>
      <![CDATA[Sets the credential created listener or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <method name="addRefreshListener" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListener" type="com.google.api.client.auth.oauth2.CredentialRefreshListener"/>
      <doc>
      <![CDATA[Adds a listener for refresh token results.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param refreshListener refresh listener
 @since 1.15]]>
      </doc>
    </method>
    <method name="getRefreshListeners" return="java.util.Collection&lt;com.google.api.client.auth.oauth2.CredentialRefreshListener&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listeners for refresh token results.

 @since 1.15]]>
      </doc>
    </method>
    <method name="setRefreshListeners" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListeners" type="java.util.Collection&lt;com.google.api.client.auth.oauth2.CredentialRefreshListener&gt;"/>
      <doc>
      <![CDATA[Sets the listeners for refresh token results.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.15]]>
      </doc>
    </method>
    <method name="getCredentialCreatedListener" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow.CredentialCreatedListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the credential created listener or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Authorization code flow builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.AuthorizationCodeFlow.Builder -->
  <!-- start interface com.google.api.client.auth.oauth2.AuthorizationCodeFlow.CredentialCreatedListener -->
  <interface name="AuthorizationCodeFlow.CredentialCreatedListener"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onCredentialCreated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenResponse" type="com.google.api.client.auth.oauth2.TokenResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Notifies of a created credential after a successful token response in
 {@link #createAndStoreCredential}.

 <p>
 Typical use is to parse additional fields from the credential created, such as an ID token.
 </p>

 @param credential created credential
 @param tokenResponse successful token response]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Listener for a created credential after a successful token response in
 {@link #createAndStoreCredential}.

 @since 1.14]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.auth.oauth2.AuthorizationCodeFlow.CredentialCreatedListener -->
  <!-- start class com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl -->
  <class name="AuthorizationCodeRequestUrl" extends="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationCodeRequestUrl" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerEncodedUrl authorization server encoded URL
 @param clientId client identifier]]>
      </doc>
    </constructor>
    <method name="setResponseTypes" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setClientId" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
    </method>
    <method name="setState" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 URL builder for an authorization web page to allow the end user to authorize the
 application to access their protected resources and that returns an authorization code, as
 specified in <a href="http://tools.ietf.org/html/rfc6749#section-4.1">Authorization Code
 Grant</a>.

 <p>
 The default for {@link #getResponseTypes()} is {@code "code"}. Use
 {@link AuthorizationCodeResponseUrl} to parse the redirect response after the end user
 grants/denies the request. Using the authorization code in this response, use
 {@link AuthorizationCodeTokenRequest} to request the access token.
 </p>

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url =
        new AuthorizationCodeRequestUrl("https://server.example.com/authorize", "s6BhdRkqt3")
            .setState("xyz").setRedirectUri("https://client.example.com/rd").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl -->
  <!-- start class com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl -->
  <class name="AuthorizationCodeResponseUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationCodeResponseUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedResponseUrl encoded authorization code response URL]]>
      </doc>
    </constructor>
    <method name="getCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization code generated by the authorization server or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setCode" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authorization code generated by the authorization server or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getState" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the state parameter matching the state parameter in the authorization request or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setState" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the state parameter matching the state parameter in the authorization request or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getError" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error code ({@code "invalid_request"}, {@code "unauthorized_client"},
 {@code "access_denied"}, {@code "unsupported_response_type"}, {@code "invalid_scope"},
 {@code "server_error"}, {@code "temporarily_unavailable"}, or an extension error code as
 specified in <a href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error
 Codes</a>) or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setError" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the error code ({@code "invalid_request"}, {@code "unauthorized_client"},
 {@code "access_denied"}, {@code "unsupported_response_type"}, {@code "invalid_scope"},
 {@code "server_error"}, {@code "temporarily_unavailable"}, or an extension error code as
 specified in <a href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error
 Codes</a>) or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getErrorDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the human-readable text providing additional information used to assist the client
 developer in understanding the error that occurred or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setErrorDescription" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorDescription" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the human-readable text providing additional information used to assist the client
 developer in understanding the error that occurred or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getErrorUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URI identifying a human-readable web page with information about the error used to
 provide the client developer with additional information about the error or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setErrorUri" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URI identifying a human-readable web page with information about the error used to
 provide the client developer with additional information about the error or {@code null} for
 none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 URL parser for the redirect URL after end user grants or denies authorization as
 specified in <a href="http://tools.ietf.org/html/rfc6749#section-4.1.2">Authorization
 Response</a>.

 <p>
 Check if {@link #getError()} is {@code null} to check if the end-user granted authorization.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    StringBuffer fullUrlBuf = request.getRequestURL();
    if (request.getQueryString() != null) {
      fullUrlBuf.append('?').append(request.getQueryString());
    }
    AuthorizationCodeResponseUrl authResponse =
        new AuthorizationCodeResponseUrl(fullUrlBuf.toString());
    // check for user-denied error
    if (authResponse.getError() != null) {
      // authorization denied...
    } else {
      // request access token using authResponse.getCode()...
    }
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl -->
  <!-- start class com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest -->
  <class name="AuthorizationCodeTokenRequest" extends="com.google.api.client.auth.oauth2.TokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationCodeTokenRequest" type="HttpTransport, JsonFactory, GenericUrl, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param code authorization code generated by the authorization server]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="getCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization code generated by the authorization server.]]>
      </doc>
    </method>
    <method name="setCode" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authorization code generated by the authorization server.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the redirect URI parameter matching the redirect URI parameter in the authorization
 request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the redirect URI parameter matching the redirect URI parameter in the authorization
 request or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 request for an access token using an authorization code as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-4.1.3">Access Token Request</a>.

 <p>
 Use {@link Credential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void requestAccessToken() throws IOException {
    try {
      TokenResponse response =
          new AuthorizationCodeTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              new GenericUrl("https://server.example.com/token"), "SplxlOBeZQQYbYS6WxSbIA")
              .setRedirectUri("https://client.example.com/rd")
              .setClientAuthentication(
                  new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw")).execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Some OAuth 2.0 providers don't support {@link BasicAuthentication} but instead support
 {@link ClientParametersAuthentication}. In the above sample code, simply replace the class name
 and it will work the same way.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest -->
  <!-- start class com.google.api.client.auth.oauth2.AuthorizationRequestUrl -->
  <class name="AuthorizationRequestUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationRequestUrl" type="java.lang.String, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerEncodedUrl authorization server encoded URL
 @param clientId client identifier
 @param responseTypes <a href="http://tools.ietf.org/html/rfc6749#section-3.1.1">response
        type</a>, which must be {@code "code"} for requesting an authorization code,
        {@code "token"} for requesting an access token (implicit grant), or a list of registered
        extension values to join with a space
 @since 1.15]]>
      </doc>
    </constructor>
    <method name="getResponseTypes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the <a href="http://tools.ietf.org/html/rfc6749#section-3.1.1">Response type</a>, which
 must be {@code "code"} for requesting an authorization code, {@code "token"} for requesting an
 access token (implicit grant), or space-separated registered extension values.]]>
      </doc>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the <a href="http://tools.ietf.org/html/rfc6749#section-3.1.1">response type</a>, which
 must be {@code "code"} for requesting an authorization code, {@code "token"} for requesting an
 access token (implicit grant), or a list of registered extension values to join with a space.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.15]]>
      </doc>
    </method>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URI that the authorization server directs the resource owner's user-agent back to
 the client after a successful authorization grant (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.1.2">Redirection Endpoint</a>) or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URI that the authorization server directs the resource owner's user-agent back to the
 client after a successful authorization grant (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.1.2">Redirection Endpoint</a>) or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getScopes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the space-separated list of scopes (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.3">Access Token Scope</a>) or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the list of scopes (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.3">Access Token Scope</a>) or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param scopes collection of scopes to be joined by a space separator (or a single value
        containing multiple space-separated scopes) or {@code null} for none
 @since 1.15]]>
      </doc>
    </method>
    <method name="getClientId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client identifier.]]>
      </doc>
    </method>
    <method name="setClientId" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client identifier.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getState" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the state (an opaque value used by the client to maintain state between the request and
 callback, as mentioned in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.1.2.2">Registration Requirements</a>) or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setState" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the state (an opaque value used by the client to maintain state between the request and
 callback, as mentioned in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.1.2.2">Registration Requirements</a>) or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 URL builder for an authorization web page to allow the end user to authorize the
 application to access their protected resources, as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.1">Authorization Endpoint</a>.

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url = new AuthorizationRequestUrl(
        "https://server.example.com/authorize", "s6BhdRkqt3", Arrays.asList("code")).setState("xyz")
        .setRedirectUri("https://client.example.com/rd").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.AuthorizationRequestUrl -->
  <!-- start class com.google.api.client.auth.oauth2.BearerToken -->
  <class name="BearerToken" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BearerToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="authorizationHeaderAccessMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an immutable and thread-safe OAuth 2.0 method for accessing protected
 resources using the <a href="http://tools.ietf.org/html/rfc6750#section-2.1">Authorization
 Request Header Field</a>.

 <p>
 According to the specification, this method MUST be supported by resource servers.
 </p>]]>
      </doc>
    </method>
    <method name="formEncodedBodyAccessMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an immutable and thread-safe OAuth 2.0 method for accessing protected
 resources using the <a href="http://tools.ietf.org/html/rfc6750#section-2.2">Form-Encoded Body
 Parameter</a>.]]>
      </doc>
    </method>
    <method name="queryParameterAccessMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an immutable and thread-safe OAuth 2.0 method for accessing protected
 resources using the <a href="http://tools.ietf.org/html/rfc6750#section-2.3">URI Query
 Parameter</a>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 helper for accessing protected resources using the <a
 href="http://tools.ietf.org/html/rfc6750">Bearer Token specification</a>.

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.BearerToken -->
  <!-- start class com.google.api.client.auth.oauth2.BrowserClientRequestUrl -->
  <class name="BrowserClientRequestUrl" extends="com.google.api.client.auth.oauth2.AuthorizationRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BrowserClientRequestUrl" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedAuthorizationServerUrl encoded authorization server URL
 @param clientId client identifier]]>
      </doc>
    </constructor>
    <method name="setResponseTypes" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setClientId" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
    </method>
    <method name="setState" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.oauth2.BrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 URL builder for an authorization web page to allow the end user to authorize the
 application to access their protected resources and that returns the access token to a browser
 client using a scripting language such as JavaScript, as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-4.2">Implicit Grant</a>.

 <p>
 The default for {@link #getResponseTypes()} is {@code "token"}.
 </p>

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url = new BrowserClientRequestUrl(
        "https://server.example.com/authorize", "s6BhdRkqt3").setState("xyz")
        .setRedirectUri("https://client.example.com/cb").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.BrowserClientRequestUrl -->
  <!-- start class com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest -->
  <class name="ClientCredentialsTokenRequest" extends="com.google.api.client.auth.oauth2.TokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientCredentialsTokenRequest" type="HttpTransport, JsonFactory, GenericUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 request for an access token using only its client credentials as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-4.4">Client Credentials Grant</a>.

 <p>
 Use {@link Credential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void requestAccessToken() throws IOException {
    try {
      TokenResponse response =
          new ClientCredentialsTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              new GenericUrl("https://server.example.com/token"))
              .setRedirectUri("https://client.example.com/rd")
              .setClientAuthentication(
                  new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw")).execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Some OAuth 2.0 providers don't support {@link BasicAuthentication} but instead support
 {@link ClientParametersAuthentication}. In the above sample code, simply replace the class name
 and it will work the same way.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.ClientCredentialsTokenRequest -->
  <!-- start class com.google.api.client.auth.oauth2.ClientParametersAuthentication -->
  <class name="ClientParametersAuthentication" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientParametersAuthentication" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getClientId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client identifier issued to the client during the registration process.]]>
      </doc>
    </method>
    <method name="getClientSecret" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client secret or {@code null} for none.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Client credentials specified as URL-encoded parameters in the HTTP request body as specified in
 <a href="http://tools.ietf.org/html/rfc6749#section-2.3.1">Client Password</a>

 <p>
 This implementation assumes that the {@link HttpRequest#getContent()} is {@code null} or an
 instance of {@link UrlEncodedContent}. This is used as the client authentication in
 {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void requestAccessToken() throws IOException {
    try {
      TokenResponse response = new AuthorizationCodeTokenRequest(new NetHttpTransport(),
          new JacksonFactory(), new GenericUrl("https://server.example.com/token"),
          "SplxlOBeZQQYbYS6WxSbIA").setRedirectUri("https://client.example.com/rd")
          .setClientAuthentication(
              new ClientParametersAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw")).execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Implementation is immutable and thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.ClientParametersAuthentication -->
  <!-- start class com.google.api.client.auth.oauth2.Credential -->
  <class name="Credential" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Credential" type="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with the ability to access protected resources, but not refresh tokens.

 <p>
 To use with the ability to refresh tokens, use {@link Builder}.
 </p>

 @param method method of presenting the access token to the resource server (for example
        {@link BearerToken.AuthorizationHeaderAccessMethod})]]>
      </doc>
    </constructor>
    <constructor name="Credential" type="com.google.api.client.auth.oauth2.Credential.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder credential builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}
 <p>
 Default implementation is to try to refresh the access token if there is no access token or if
 we are 1 minute away from expiration. If token server is unavailable, it will try to use the
 access token even if has expired. If a 4xx error is encountered while refreshing the token,
 {@link TokenResponseException} is thrown. If successful, it will call {@link #getMethod()} and
 {@link AccessMethod#intercept}.
 </p>

 <p>
 Subclasses may override.
 </p>]]>
      </doc>
    </method>
    <method name="handleResponse" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <param name="response" type="HttpResponse"/>
      <param name="supportsRetry" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}
 <p>
 Default implementation checks if {@code WWW-Authenticate} exists and contains a "Bearer" value
 (see <a href="http://tools.ietf.org/html/rfc6750#section-3.1">rfc6750 section 3.1</a> for more
 details). If so, it calls {@link #refreshToken} in case the error code contains
 {@code invalid_token}. If there is no "Bearer" in {@code WWW-Authenticate} and the status code
 is {@link HttpStatusCodes#STATUS_CODE_UNAUTHORIZED} it calls {@link #refreshToken}. If
 {@link #executeRefreshToken()} throws an I/O exception, this implementation will log the
 exception and return {@code false}. Subclasses may override.
 </p>]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getAccessToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setAccessToken" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access token.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param accessToken access token or {@code null} for none]]>
      </doc>
    </method>
    <method name="getMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the method of presenting the access token to the resource server (for example
 {@link BearerToken.AuthorizationHeaderAccessMethod}).]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock used for expiration checks by this Credential. Mostly used for unit-testing.
 @since 1.9]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the HTTP transport for executing refresh token request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory to use for parsing response for refresh token request or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="getTokenServerEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the encoded authorization server URL or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getRefreshToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the refresh token associated with the access token to be refreshed or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the refresh token.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param refreshToken refresh token or {@code null} for none]]>
      </doc>
    </method>
    <method name="getExpirationTimeMilliseconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Expected expiration time in milliseconds or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setExpirationTimeMilliseconds" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeMilliseconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the expected expiration time in milliseconds or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getExpiresInSeconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the remaining lifetime in seconds of the access token (for example 3600 for an hour, or
 -3600 if expired an hour ago) or {@code null} if unknown.]]>
      </doc>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresIn" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the lifetime in seconds of the access token (for example 3600 for an hour) or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param expiresIn lifetime in seconds of the access token (for example 3600 for an hour) or
        {@code null} for none]]>
      </doc>
    </method>
    <method name="getClientAuthentication" return="HttpExecuteInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client authentication or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer for refresh token requests to the token server or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="refreshToken" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Request a new access token from the authorization endpoint.

 <p>
 On success, it will call {@link #setFromTokenResponse(TokenResponse)}, call
 {@link CredentialRefreshListener#onTokenResponse} with the token response, and return
 {@code true}. On error, it will call {@link #setAccessToken(String)} and
 {@link #setExpiresInSeconds(Long)} with {@code null}, call
 {@link CredentialRefreshListener#onTokenErrorResponse} with the token error response, and
 return {@code false}. If a 4xx error is encountered while refreshing the token,
 {@link TokenResponseException} is thrown.
 </p>

 <p>
 If there is no refresh token, it will quietly return {@code false}.
 </p>

 @return whether a new access token was successfully retrieved]]>
      </doc>
    </method>
    <method name="setFromTokenResponse" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenResponse" type="com.google.api.client.auth.oauth2.TokenResponse"/>
      <doc>
      <![CDATA[Sets the {@link #setAccessToken access token}, {@link #setRefreshToken refresh token} (if
 available), and {@link #setExpiresInSeconds expires-in time} based on the values from the token
 response.

 <p>
 It does not call the refresh listeners.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param tokenResponse successful token response]]>
      </doc>
    </method>
    <method name="executeRefreshToken" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a request for new credentials from the token server.

 <p>
 The default implementation calls {@link RefreshTokenRequest#execute()} using the
 {@link #getTransport()}, {@link #getJsonFactory()}, {@link #getRequestInitializer()},
 {@link #getTokenServerEncodedUrl()}, {@link #getRefreshToken()}, and the
 {@link #getClientAuthentication()}. If {@link #getRefreshToken()} is {@code null}, it instead
 returns {@code null}.
 </p>

 <p>
 Subclasses may override for a different implementation. Implementations can assume proper
 thread synchronization is already taken care of inside {@link #refreshToken()}.
 </p>

 @return successful response from the token server or {@code null} if it is not possible to
         refresh the access token
 @throws TokenResponseException if an error response was received from the token server]]>
      </doc>
    </method>
    <method name="getRefreshListeners" return="java.util.Collection&lt;com.google.api.client.auth.oauth2.CredentialRefreshListener&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the unmodifiable collection of listeners for refresh token results.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe OAuth 2.0 helper for accessing protected resources using an access token, as well as
 optionally refreshing the access token when it expires using a refresh token.

 <p>
 Sample usage:
 </p>

 <pre>
  public static Credential createCredentialWithAccessTokenOnly(
      HttpTransport transport, JsonFactory jsonFactory, TokenResponse tokenResponse) {
    return new Credential(BearerToken.authorizationHeaderAccessMethod()).setFromTokenResponse(
        tokenResponse);
  }

  public static Credential createCredentialWithRefreshToken(
      HttpTransport transport, JsonFactory jsonFactory, TokenResponse tokenResponse) {
    return new Credential.Builder(BearerToken.authorizationHeaderAccessMethod()).setTransport(
        transport)
        .setJsonFactory(jsonFactory)
        .setTokenServerUrl(
            new GenericUrl("https://server.example.com/token"))
        .setClientAuthentication(new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw"))
        .build()
        .setFromTokenResponse(tokenResponse);
  }
 </pre>

 <p>
 If you need to persist the access token in a data store, use {@link DataStoreFactory} and
 {@link Builder#addRefreshListener(CredentialRefreshListener)} with
 {@link DataStoreCredentialRefreshListener}.
 </p>

 <p>
 If you have a custom request initializer, request execute interceptor, or unsuccessful response
 handler, take a look at the sample usage for {@link HttpExecuteInterceptor} and
 {@link HttpUnsuccessfulResponseHandler}, which are interfaces that this class also implements.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.Credential -->
  <!-- start interface com.google.api.client.auth.oauth2.Credential.AccessMethod -->
  <interface name="Credential.AccessMethod"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <param name="accessToken" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Intercept the HTTP request during {@link Credential#intercept(HttpRequest)} right before the
 HTTP request executes by providing the access token.

 @param request HTTP request
 @param accessToken access token]]>
      </doc>
    </method>
    <method name="getAccessTokenFromRequest" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <doc>
      <![CDATA[Retrieve the original access token in the HTTP request, as provided in
 {@link #intercept(HttpRequest, String)}.

 @param request HTTP request
 @return original access token or {@code null} for none]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Method of presenting the access token to the resource server as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-7">Accessing Protected Resources</a>.]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.auth.oauth2.Credential.AccessMethod -->
  <!-- start class com.google.api.client.auth.oauth2.Credential.Builder -->
  <class name="Credential.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Credential.Builder" type="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param method method of presenting the access token to the resource server (for example
        {@link BearerToken.AuthorizationHeaderAccessMethod})]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new credential instance.]]>
      </doc>
    </method>
    <method name="getMethod" return="com.google.api.client.auth.oauth2.Credential.AccessMethod"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the method of presenting the access token to the resource server (for example
 {@link BearerToken.AuthorizationHeaderAccessMethod}).]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport for executing refresh token request or {@code null} if not
 refreshing tokens.]]>
      </doc>
    </method>
    <method name="setTransport" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[Sets the HTTP transport for executing refresh token request or {@code null} if not refreshing
 tokens.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock to use for expiration checks or {@link Clock#SYSTEM} as default.
 @since 1.9]]>
      </doc>
    </method>
    <method name="setClock" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[Sets the clock to use for expiration checks.

 <p>
 The default value is Clock.SYSTEM.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory to use for parsing response for refresh token request or
 {@code null} if not refreshing tokens.]]>
      </doc>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <doc>
      <![CDATA[Sets the JSON factory to use for parsing response for refresh token request or {@code null}
 if not refreshing tokens.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getTokenServerUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token server URL or {@code null} if not refreshing tokens.]]>
      </doc>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[Sets the token server URL or {@code null} if not refreshing tokens.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setTokenServerEncodedUrl" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerEncodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the encoded token server URL or {@code null} if not refreshing tokens.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getClientAuthentication" return="HttpExecuteInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client authentication or {@code null} for none (see
 {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)}).]]>
      </doc>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
      <doc>
      <![CDATA[Sets the client authentication or {@code null} for none (see
 {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)}).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer for refresh token requests to the token server or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Sets the HTTP request initializer for refresh token requests to the token server or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="addRefreshListener" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListener" type="com.google.api.client.auth.oauth2.CredentialRefreshListener"/>
      <doc>
      <![CDATA[Adds a listener for refresh token results.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param refreshListener refresh listener]]>
      </doc>
    </method>
    <method name="getRefreshListeners" return="java.util.Collection&lt;com.google.api.client.auth.oauth2.CredentialRefreshListener&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listeners for refresh token results.]]>
      </doc>
    </method>
    <method name="setRefreshListeners" return="com.google.api.client.auth.oauth2.Credential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListeners" type="java.util.Collection&lt;com.google.api.client.auth.oauth2.CredentialRefreshListener&gt;"/>
      <doc>
      <![CDATA[Sets the listeners for refresh token results.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Credential builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.Credential.Builder -->
  <!-- start interface com.google.api.client.auth.oauth2.CredentialRefreshListener -->
  <interface name="CredentialRefreshListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenResponse" type="com.google.api.client.auth.oauth2.TokenResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Notifies of a successful token response from {@link Credential#refreshToken()}.

 <p>
 Typical use is to provide functionality like persisting the access token in a data store.
 Implementations can assume proper thread synchronization is already taken care of inside
 {@link Credential#refreshToken()}. Implementations can also assume that
 {@link Credential#setAccessToken}, {@link Credential#setRefreshToken}, and
 {@link Credential#setExpiresInSeconds} have already been called previously with the information
 from the {@link TokenResponse}.
 </p>

 @param credential credential on which the token refresh applied
 @param tokenResponse token response]]>
      </doc>
    </method>
    <method name="onTokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenErrorResponse" type="com.google.api.client.auth.oauth2.TokenErrorResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Notifies of an error token response from {@link Credential#refreshToken()}.

 <p>
 Typical use is to provide functionality like removing persistence of the access token from the
 data store. Implementations can assume proper thread synchronization is already taken care of
 inside {@link Credential#refreshToken()}. Implementations can also assume that
 {@link Credential#setAccessToken}, and {@link Credential#setExpiresInSeconds} have already been
 called previously with {@code null} to clear their values.
 </p>

 @param credential credential on which the token refresh applied
 @param tokenErrorResponse token error response or {@code null} for none supplied]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Listener for refresh token results.

 <p>
 These methods are called from {@link Credential#refreshToken()} after a response has been
 received from refreshing the token. {@link #onTokenResponse} is called on a successful HTTP
 response, and {@link #onTokenErrorResponse} is called on an error HTTP response.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.auth.oauth2.CredentialRefreshListener -->
  <!-- start interface com.google.api.client.auth.oauth2.CredentialStore -->
  <interface name="CredentialStore"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="(to be removed in the future) Use {@link DataStoreFactory} with
             {@link StoredCredential} instead.">
    <method name="load" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the credential for the given user ID.

 @param userId user ID whose credential needs to be loaded
 @param credential credential whose {@link Credential#setAccessToken access token},
        {@link Credential#setRefreshToken refresh token}, and
        {@link Credential#setExpirationTimeMilliseconds expiration time} need to be set if the
        credential already exists in storage
 @return {@code true} if the credential has been successfully found and loaded or {@code false}
         otherwise]]>
      </doc>
    </method>
    <method name="store"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Stores the credential of the given user ID.

 @param userId user ID whose credential needs to be stored
 @param credential credential whose {@link Credential#getAccessToken access token},
        {@link Credential#getRefreshToken refresh token}, and
        {@link Credential#getExpirationTimeMilliseconds expiration time} need to be stored]]>
      </doc>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Deletes the credential of the given user ID.

 @param userId user ID whose credential needs to be deleted
 @param credential credential to be deleted]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth 2.0 credential persistence store interface to provide a fully pluggable storage mechanism.

 <p>
 The user ID should be used as the primary key for storage, and the rest of the data consists of
 the {@link Credential#getAccessToken access token}, {@link Credential#getRefreshToken refresh
 token}, and {@link Credential#getExpirationTimeMilliseconds expiration time}.
 </p>

 <p>
 Implementations should be thread safe.
 </p>

 @since 1.7
 @author Yaniv Inbar
 @deprecated (to be removed in the future) Use {@link DataStoreFactory} with
             {@link StoredCredential} instead.]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.auth.oauth2.CredentialStore -->
  <!-- start class com.google.api.client.auth.oauth2.CredentialStoreRefreshListener -->
  <class name="CredentialStoreRefreshListener" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(to be removed in the future) Use {@link DataStoreCredentialRefreshListener}
             instead.">
    <implements name="com.google.api.client.auth.oauth2.CredentialRefreshListener"/>
    <constructor name="CredentialStoreRefreshListener" type="java.lang.String, com.google.api.client.auth.oauth2.CredentialStore"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param userId user ID whose credential is to be updated
 @param credentialStore credential store]]>
      </doc>
    </constructor>
    <method name="onTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenResponse" type="com.google.api.client.auth.oauth2.TokenResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="onTokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenErrorResponse" type="com.google.api.client.auth.oauth2.TokenErrorResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getCredentialStore" return="com.google.api.client.auth.oauth2.CredentialStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the credential store.]]>
      </doc>
    </method>
    <method name="makePersistent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Stores the updated credential in the credential store.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe OAuth 2.0 credential refresh listener that stores the refresh token response in the
 credential store.

 <p>
 It needs to be added as a refresh listener using {@link Credential.Builder#addRefreshListener}.
 </p>

 @since 1.7
 @author Yaniv Inbar
 @deprecated (to be removed in the future) Use {@link DataStoreCredentialRefreshListener}
             instead.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.CredentialStoreRefreshListener -->
  <!-- start class com.google.api.client.auth.oauth2.DataStoreCredentialRefreshListener -->
  <class name="DataStoreCredentialRefreshListener" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.auth.oauth2.CredentialRefreshListener"/>
    <constructor name="DataStoreCredentialRefreshListener" type="java.lang.String, DataStoreFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Constructor using {@link StoredCredential#getDefaultDataStore(DataStoreFactory)} for the stored
 credential data store.

 @param userId user ID whose credential is to be updated
 @param dataStoreFactory data store factory]]>
      </doc>
    </constructor>
    <constructor name="DataStoreCredentialRefreshListener" type="java.lang.String, &lt;any&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param userId user ID whose credential is to be updated
 @param credentialDataStore stored credential data store]]>
      </doc>
    </constructor>
    <method name="onTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenResponse" type="com.google.api.client.auth.oauth2.TokenResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="onTokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <param name="tokenErrorResponse" type="com.google.api.client.auth.oauth2.TokenErrorResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getCredentialDataStore" return="&lt;any&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the stored credential data store.]]>
      </doc>
    </method>
    <method name="makePersistent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Stores the updated credential in the credential store.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe OAuth 2.0 credential refresh listener that stores the refresh token response in the
 credential data store.

 <p>
 It needs to be added as a refresh listener using {@link Credential.Builder#addRefreshListener}.
 Sample usage:
 </p>

 <pre>
  static void addDataStoreCredentialRefreshListener(
      Credential.Builder credentialBuilder, String userId, DataStoreFactory dataStoreFactory)
      throws IOException {
    credentialBuilder.addRefreshListener(
        new DataStoreCredentialRefreshListener(userId, dataStoreFactory));
  }
 </pre>

 @since 1.6
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.DataStoreCredentialRefreshListener -->
  <!-- start class com.google.api.client.auth.oauth2.PasswordTokenRequest -->
  <class name="PasswordTokenRequest" extends="com.google.api.client.auth.oauth2.TokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PasswordTokenRequest" type="HttpTransport, JsonFactory, GenericUrl, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param username resource owner username
 @param password resource owner password]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="getUsername" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the resource owner username.]]>
      </doc>
    </method>
    <method name="setUsername" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="username" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the resource owner username.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the resource owner password.]]>
      </doc>
    </method>
    <method name="setPassword" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="password" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the resource owner password.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.PasswordTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 request for an access token using the user's username and password as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-4.3">Resource Owner Password Credentials
 Grant</a>.

 <p>
 Use {@link Credential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void requestAccessToken() throws IOException {
    try {
      TokenResponse response =
          new PasswordTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              new GenericUrl("https://server.example.com/token"), "johndoe", "A3ddj3w")
              .setRedirectUri("https://client.example.com/rd")
              .setClientAuthentication(
                  new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw")).execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Some OAuth 2.0 providers don't support {@link BasicAuthentication} but instead support
 {@link ClientParametersAuthentication}. In the above sample code, simply replace the class name
 and it will work the same way.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.PasswordTokenRequest -->
  <!-- start class com.google.api.client.auth.oauth2.RefreshTokenRequest -->
  <class name="RefreshTokenRequest" extends="com.google.api.client.auth.oauth2.TokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RefreshTokenRequest" type="HttpTransport, JsonFactory, GenericUrl, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param refreshToken refresh token issued to the client]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="getRefreshToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the refresh token issued to the client.]]>
      </doc>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the refresh token issued to the client.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.RefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 request to refresh an access token using a refresh token as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-6">Refreshing an Access Token</a>.

 <p>
 Use {@link Credential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void refreshAccessToken() throws IOException {
    try {
      TokenResponse response =
          new RefreshTokenRequest(new NetHttpTransport(), new JacksonFactory(), new GenericUrl(
              "https://server.example.com/token"), "tGzv3JOkF0XG5Qx2TlKWIA")
              .setClientAuthentication(
                  new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw")).execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Some OAuth 2.0 providers don't support {@link BasicAuthentication} but instead support
 {@link ClientParametersAuthentication}. In the above sample code, simply replace the class name
 and it will work the same way.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.RefreshTokenRequest -->
  <!-- start class com.google.api.client.auth.oauth2.StoredCredential -->
  <class name="StoredCredential" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="StoredCredential"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="StoredCredential" type="com.google.api.client.auth.oauth2.Credential"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param credential existing credential to copy from]]>
      </doc>
    </constructor>
    <method name="getAccessToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setAccessToken" return="com.google.api.client.auth.oauth2.StoredCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getExpirationTimeMilliseconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the expected expiration time in milliseconds or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setExpirationTimeMilliseconds" return="com.google.api.client.auth.oauth2.StoredCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeMilliseconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the expected expiration time in milliseconds or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getRefreshToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the refresh token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.auth.oauth2.StoredCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the refresh token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDefaultDataStore" return="&lt;any&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataStoreFactory" type="DataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the stored credential data store using the ID {@link #DEFAULT_DATA_STORE_ID}.

 @param dataStoreFactory data store factory
 @return stored credential data store]]>
      </doc>
    </method>
    <field name="DEFAULT_DATA_STORE_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default data store ID.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Credential information to be stored in a {@link DataStoreFactory}.

 <p>
 Implementation is thread safe.
 </p>

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.StoredCredential -->
  <!-- start class com.google.api.client.auth.oauth2.TokenErrorResponse -->
  <class name="TokenErrorResponse" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenErrorResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getError" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error code ({@code "invalid_request"}, {@code "invalid_client"},
 {@code "invalid_grant"}, {@code "unauthorized_client"}, {@code "unsupported_grant_type"},
 {@code "invalid_scope"}, or an extension error code as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error Codes</a>).]]>
      </doc>
    </method>
    <method name="setError" return="com.google.api.client.auth.oauth2.TokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the error code ({@code "invalid_request"}, {@code "invalid_client"},
 {@code "invalid_grant"}, {@code "unauthorized_client"}, {@code "unsupported_grant_type"},
 {@code "invalid_scope"}, or an extension error code as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-8.5">Defining Additional Error Codes</a>).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getErrorDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the human-readable text providing additional information, used to assist the client
 developer in understanding the error that occurred or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setErrorDescription" return="com.google.api.client.auth.oauth2.TokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorDescription" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the human-readable text providing additional information, used to assist the client
 developer in understanding the error that occurred or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getErrorUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URI identifying a human-readable web page with information about the error, used to
 provide the client developer with additional information about the error or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setErrorUri" return="com.google.api.client.auth.oauth2.TokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URI identifying a human-readable web page with information about the error, used to
 provide the client developer with additional information about the error or {@code null} for
 none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.TokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.oauth2.TokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 parser for an error access token response as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-5.2">Error Response</a>.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.TokenErrorResponse -->
  <!-- start class com.google.api.client.auth.oauth2.TokenRequest -->
  <class name="TokenRequest" extends="GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenRequest" type="HttpTransport, JsonFactory, GenericUrl, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param grantType grant type ({@code "authorization_code"}, {@code "password"},
        {@code "client_credentials"}, {@code "refresh_token"} or absolute URI of the extension
        grant type)]]>
      </doc>
    </constructor>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.auth.oauth2.TokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Sets the HTTP request initializer or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getClientAuthentication" return="HttpExecuteInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client authentication or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.auth.oauth2.TokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
      <doc>
      <![CDATA[Sets the client authentication or {@code null} for none.

 <p>
 The recommended initializer by the specification is {@link BasicAuthentication}. All
 authorization servers must support that. A common alternative is
 {@link ClientParametersAuthentication}. An alternative client authentication method may be
 provided that implements {@link HttpRequestInitializer}.
 </p>

 <p>
 This HTTP request execute interceptor is guaranteed to be the last execute interceptor before
 the request is executed, and after any execute interceptor set by the
 {@link #getRequestInitializer()}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getTokenServerUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token server URL.]]>
      </doc>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.auth.oauth2.TokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[Sets the token server URL.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getScopes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the space-separated list of scopes (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.3">Access Token Scope</a>) or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="setScopes" return="com.google.api.client.auth.oauth2.TokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the list of scopes (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-3.3">Access Token Scope</a>) or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param scopes collection of scopes to be joined by a space separator (or a single value
        containing multiple space-separated scopes)
 @since 1.15]]>
      </doc>
    </method>
    <method name="getGrantType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the grant type ({@code "authorization_code"}, {@code "password"},
 {@code "client_credentials"}, {@code "refresh_token"} or absolute URI of the extension grant
 type).]]>
      </doc>
    </method>
    <method name="setGrantType" return="com.google.api.client.auth.oauth2.TokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the grant type ({@code "authorization_code"}, {@code "password"},
 {@code "client_credentials"}, {@code "refresh_token"} or absolute URI of the extension grant
 type).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="executeUnparsed" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes request for an access token, and returns the HTTP response.

 <p>
 To execute and parse the response to {@link TokenResponse}, instead use {@link #execute()}.
 </p>

 <p>
 Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is
 no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the
 response stream is properly closed. Example usage:
 </p>

 <pre>
     HttpResponse response = tokenRequest.executeUnparsed();
     try {
       // process the HTTP response object
     } finally {
       response.disconnect();
     }
 </pre>

 @return successful access token response, which can then be parsed directly using
         {@link HttpResponse#parseAs(Class)} or some other parsing method
 @throws TokenResponseException for an error response]]>
      </doc>
    </method>
    <method name="execute" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes request for an access token, and returns the parsed access token response.

 <p>
 To execute but parse the response in an alternate way, use {@link #executeUnparsed()}.
 </p>

 <p>
 Default implementation calls {@link #executeUnparsed()} and then parses using
 {@link TokenResponse}. Subclasses may override to change the return type, but must still call
 {@link #executeUnparsed()}.
 </p>

 @return parsed successful access token response
 @throws TokenResponseException for an error response]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.TokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 request for an access token as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-4">Obtaining Authorization</a>.

 <p>
 Call {@link #execute()} to execute the request and use the returned {@link TokenResponse}. On
 error, it will instead throw {@link TokenResponseException}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.TokenRequest -->
  <!-- start class com.google.api.client.auth.oauth2.TokenResponse -->
  <class name="TokenResponse" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAccessToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access token issued by the authorization server.]]>
      </doc>
    </method>
    <method name="setAccessToken" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access token issued by the authorization server.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getTokenType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token type (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-7.1">Access Token Types</a>).]]>
      </doc>
    </method>
    <method name="setTokenType" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the token type (as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-7.1">Access Token Types</a>).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getExpiresInSeconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the lifetime in seconds of the access token (for example 3600 for an hour) or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresInSeconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the lifetime in seconds of the access token (for example 3600 for an hour) or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRefreshToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the refresh token which can be used to obtain new access tokens using the same
 authorization grant or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the refresh token which can be used to obtain new access tokens using the same
 authorization grant or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getScope" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the scope of the access token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setScope" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the scope of the access token or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.oauth2.TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 JSON model for a successful access token response as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-5.1">Successful Response</a>.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.TokenResponse -->
  <!-- start class com.google.api.client.auth.oauth2.TokenResponseException -->
  <class name="TokenResponseException" extends="HttpResponseException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDetails" return="com.google.api.client.auth.oauth2.TokenErrorResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token error response details or {@code null} if unable to parse.]]>
      </doc>
    </method>
    <method name="from" return="com.google.api.client.auth.oauth2.TokenResponseException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <doc>
      <![CDATA[Returns a new instance of {@link TokenResponseException}.

 <p>
 If there is a JSON error response, it is parsed using {@link TokenErrorResponse}, which can be
 inspected using {@link #getDetails()}. Otherwise, the full response content is read and
 included in the exception message.
 </p>

 @param jsonFactory JSON factory
 @param response HTTP response
 @return new instance of {@link TokenErrorResponse}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Exception thrown when receiving an error response from the token server as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-5.2">Error Response</a>

 <p>
 To get the structured details, use {@link #getDetails()}.
 </p>

 <p>
 Sample usage can be found for {@link AuthorizationCodeTokenRequest}.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth2.TokenResponseException -->
</package>
<package name="com.google.api.client.auth.openidconnect">
  <!-- start class com.google.api.client.auth.openidconnect.IdToken -->
  <class name="IdToken" extends="JsonWebSignature"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdToken" type="Header, com.google.api.client.auth.openidconnect.IdToken.Payload, byte[], byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param header header
 @param payload payload
 @param signatureBytes bytes of the signature
 @param signedContentBytes bytes of the signature content]]>
      </doc>
    </constructor>
    <method name="getPayload" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="verifyIssuer" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="expectedIssuer" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether the issuer in the payload matches the given expected issuer as specified in
 step 1 of <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation">ID Token
 Validation</a>.

 @param expectedIssuer expected issuer]]>
      </doc>
    </method>
    <method name="verifyAudience" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="trustedClientIds" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Returns whether the audience in the payload contains only client IDs that are trusted as
 specified in step 2 of <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation">ID Token
 Validation</a>.

 @param trustedClientIds list of trusted client IDs]]>
      </doc>
    </method>
    <method name="verifyTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="currentTimeMillis" type="long"/>
      <param name="acceptableTimeSkewSeconds" type="long"/>
      <doc>
      <![CDATA[Returns whether the {@link Payload#getExpirationTimeSeconds} and
 {@link Payload#getIssuedAtTimeSeconds} are valid relative to the current time, allowing for a
 clock skew as specified in steps 5 and 6 of <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation">ID Token
 Validation</a>.

 @param currentTimeMillis current time in milliseconds (typically
        {@link System#currentTimeMillis()})
 @param acceptableTimeSkewSeconds seconds of acceptable clock skew]]>
      </doc>
    </method>
    <method name="verifyExpirationTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="currentTimeMillis" type="long"/>
      <param name="acceptableTimeSkewSeconds" type="long"/>
      <doc>
      <![CDATA[Returns whether the {@link Payload#getExpirationTimeSeconds} is valid relative to the current
 time, allowing for a clock skew as specified in step 5 of <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation">ID Token
 Validation</a>.

 @param currentTimeMillis current time in milliseconds (typically
        {@link System#currentTimeMillis()})
 @param acceptableTimeSkewSeconds seconds of acceptable clock skew]]>
      </doc>
    </method>
    <method name="verifyIssuedAtTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="currentTimeMillis" type="long"/>
      <param name="acceptableTimeSkewSeconds" type="long"/>
      <doc>
      <![CDATA[Returns whether the {@link Payload#getIssuedAtTimeSeconds} is valid relative to the current
 time, allowing for a clock skew as specified in step 6 of <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation">ID Token
 Validation</a>.

 @param currentTimeMillis current time in milliseconds (typically
        {@link System#currentTimeMillis()})
 @param acceptableTimeSkewSeconds seconds of acceptable clock skew]]>
      </doc>
    </method>
    <method name="parse" return="com.google.api.client.auth.openidconnect.IdToken"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="idTokenString" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given ID token string and returns the parsed ID token.

 @param jsonFactory JSON factory
 @param idTokenString ID token string
 @return parsed ID token]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 ID token as described in <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id_token">ID Token</a>.

 <p>
 Use {@link #parse(JsonFactory, String)} to parse an ID token from a string. Then, use the
 {@code verify} methods to verify the ID token as required by the specification.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.openidconnect.IdToken -->
  <!-- start class com.google.api.client.auth.openidconnect.IdToken.Payload -->
  <class name="IdToken.Payload" extends="JsonWebToken.Payload"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdToken.Payload"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAuthorizationTimeSeconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the time (in seconds) of end-user authorization or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setAuthorizationTimeSeconds" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationTimeSeconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the time (in seconds) of end-user authorization or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAuthorizedParty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorized party or {@code null} for none.

 <p>
 Upgrade warning: in prior version 1.15 this method returned an {@link Object}, but starting
 with version 1.16 it returns a {@link String}.
 </p>]]>
      </doc>
    </method>
    <method name="setAuthorizedParty" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizedParty" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authorized party or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 <p>
 Upgrade warning: in prior version 1.15 the parameter was an {@link Object}, but starting with
 version 1.16 the parameter is a {@link String}.
 </p>]]>
      </doc>
    </method>
    <method name="getNonce" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value used to associate a client session with an ID token or {@code null} for
 none.

 @since 1.16]]>
      </doc>
    </method>
    <method name="setNonce" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nonce" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the value used to associate a client session with an ID token or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.16]]>
      </doc>
    </method>
    <method name="getAccessTokenHash" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access token hash value or {@code null} for none.

 @since 1.16]]>
      </doc>
    </method>
    <method name="setAccessTokenHash" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessTokenHash" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access token hash value or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.16]]>
      </doc>
    </method>
    <method name="getClassReference" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authentication context class reference or {@code null} for none.

 @since 1.16]]>
      </doc>
    </method>
    <method name="setClassReference" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="classReference" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authentication context class reference or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.16]]>
      </doc>
    </method>
    <method name="getMethodsReferences" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authentication methods references or {@code null} for none.

 @since 1.16]]>
      </doc>
    </method>
    <method name="setMethodsReferences" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="methodsReferences" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the authentication methods references or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.16]]>
      </doc>
    </method>
    <method name="setExpirationTimeSeconds" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setNotBeforeTimeSeconds" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notBeforeTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setIssuedAtTimeSeconds" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuedAtTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setIssuer" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuer" type="java.lang.String"/>
    </method>
    <method name="setAudience" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audience" type="java.lang.Object"/>
    </method>
    <method name="setJwtId" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jwtId" type="java.lang.String"/>
    </method>
    <method name="setType" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
    </method>
    <method name="setSubject" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subject" type="java.lang.String"/>
    </method>
    <method name="set" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.openidconnect.IdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 ID token payload.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.openidconnect.IdToken.Payload -->
  <!-- start class com.google.api.client.auth.openidconnect.IdTokenResponse -->
  <class name="IdTokenResponse" extends="com.google.api.client.auth.oauth2.TokenResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdTokenResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIdToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the ID token.]]>
      </doc>
    </method>
    <method name="setIdToken" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the ID token.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setAccessToken" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
    </method>
    <method name="setTokenType" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="java.lang.String"/>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresIn" type="java.lang.Long"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="setScope" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
    </method>
    <method name="parseIdToken" return="com.google.api.client.auth.openidconnect.IdToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses using {@link JsonWebSignature#parse(JsonFactory, String)} based on the
 {@link #getFactory() JSON factory} and {@link #getIdToken() ID token}.]]>
      </doc>
    </method>
    <method name="execute" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenRequest" type="com.google.api.client.auth.oauth2.TokenRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes the given ID token request, and returns the parsed ID token response.

 @param tokenRequest token request
 @return parsed successful ID token response
 @throws TokenResponseException for an error response]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.auth.openidconnect.IdTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth ID Connect JSON model for a successful access token response as specified in <a
 href="http://openid.net/specs/openid-connect-basic-1_0-23.html">OpenID Connect Basic Client
 Profile 1.0 (draft 23)</a>.

 <p>
 Implementation is not thread-safe. Sample usage:
 </p>

 <pre>
  static JsonWebSignature executeIdToken(TokenRequest tokenRequest) throws IOException {
    IdTokenResponse idTokenResponse = IdTokenResponse.execute(tokenRequest);
    return idTokenResponse.parseIdToken();
  }
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.openidconnect.IdTokenResponse -->
  <!-- start class com.google.api.client.auth.openidconnect.IdTokenVerifier -->
  <class name="IdTokenVerifier" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdTokenVerifier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdTokenVerifier" type="com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder]]>
      </doc>
    </constructor>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock.]]>
      </doc>
    </method>
    <method name="getAcceptableTimeSkewSeconds" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the seconds of time skew to accept when verifying time.]]>
      </doc>
    </method>
    <method name="getIssuer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the expected issuer or {@code null} to suppress the issuer check.]]>
      </doc>
    </method>
    <method name="getAudience" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the unmodifiable list of trusted audience client IDs or {@code null} to suppress the
 audience check.]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idToken" type="com.google.api.client.auth.openidconnect.IdToken"/>
      <doc>
      <![CDATA[Verifies that the given ID token is valid using the cached public keys.

 It verifies:

 <ul>
 <li>The issuer is {@link #getIssuer()} by calling {@link IdToken#verifyIssuer(String)}.</li>
 <li>The audience is one of {@link #getAudience()} by calling
 {@link IdToken#verifyAudience(Collection)}.</li>
 <li>The current time against the issued at and expiration time, using the {@link #getClock()}
 and allowing for a time skew specified in {#link {@link #getAcceptableTimeSkewSeconds()} , by
 calling {@link IdToken#verifyTime(long, long)}.</li>
 </ul>

 <p>
 Overriding is allowed, but it must call the super implementation.
 </p>

 @param idToken ID token
 @return {@code true} if verified successfully or {@code false} if failed]]>
      </doc>
    </method>
    <field name="DEFAULT_TIME_SKEW_SECONDS" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default value for seconds of time skew to accept when verifying time (5 minutes).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe ID token verifier based on <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation">ID Token
 Validation</a>.

 <p>
 Call {@link #verify(IdToken)} to verify a ID token. This is a light-weight object, so you may use
 a new instance for each configuration of expected issuer and trusted client IDs. Sample usage:
 </p>

 <pre>
    IdTokenVerifier verifier = new IdTokenVerifier.Builder()
        .setIssuer("issuer.example.com")
        .setAudience(Arrays.asList("myClientId"))
        .build();
    ...
    if (!verifier.verify(idToken)) {...}
 </pre>

 <p>
 Note that {@link #verify(IdToken)} only implements a subset of the verification steps, mostly
 just the MUST steps. Please read <a
 href="http://openid.net/specs/openid-connect-basic-1_0-27.html#id.token.validation>ID Token
 Validation</a> for the full list of verification steps.
 </p>

 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.openidconnect.IdTokenVerifier -->
  <!-- start class com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder -->
  <class name="IdTokenVerifier.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdTokenVerifier.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.auth.openidconnect.IdTokenVerifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link IdTokenVerifier}.]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock.]]>
      </doc>
    </method>
    <method name="setClock" return="com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[Sets the clock.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getIssuer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the expected issuer or {@code null} to suppress the issuer check.]]>
      </doc>
    </method>
    <method name="setIssuer" return="com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuer" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the expected issuer or {@code null} to suppress the issuer check.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAudience" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of trusted audience client IDs or {@code null} to suppress the audience
 check.]]>
      </doc>
    </method>
    <method name="setAudience" return="com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audience" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the list of trusted audience client IDs or {@code null} to suppress the audience check.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAcceptableTimeSkewSeconds" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the seconds of time skew to accept when verifying time.]]>
      </doc>
    </method>
    <method name="setAcceptableTimeSkewSeconds" return="com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="acceptableTimeSkewSeconds" type="long"/>
      <doc>
      <![CDATA[Sets the seconds of time skew to accept when verifying time (default is
 {@link #DEFAULT_TIME_SKEW_SECONDS}).

 <p>
 It must be greater or equal to zero.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Builder for {@link IdTokenVerifier}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.openidconnect.IdTokenVerifier.Builder -->
</package>
<package name="com.google.api.client.extensions.appengine.auth">
  <!-- start class com.google.api.client.extensions.appengine.auth.AbstractAppEngineCallbackServlet -->
  <class name="AbstractAppEngineCallbackServlet" extends="com.google.api.client.extensions.servlet.auth.AbstractCallbackServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAppEngineCallbackServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUserId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the user ID of the user that is logged in.

 @throws IllegalStateException Thrown when no user is logged in.]]>
      </doc>
    </method>
    <method name="newHttpTransportInstance" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 This servlet fills in some of the required information for the {@link AbstractCallbackServlet}
 with reasonable defaults for App Engine. It will default the servlet to creating
 {@link UrlFetchTransport} objects whenever an {@link HttpTransport} is needed. It will also
 default the user identifier to the logged in App Engine user. This servlet requires that the App
 Engine user must be logged in to work correctly. This can be accomplished by adding a security
 constraint in your web.xml for the path at which this servlet will live.
 <p>
 Example that requires login for all pages:

 <pre>
 <code>
  &lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;web-resource-name&gt;any&lt;/web-resource-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;*&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;
 </code>
 </pre>

 <p>
 Warning: starting with version 1.7, usage of this for OAuth 2.0 is deprecated. Instead use {@link
   com.google.api.client.extensions.appengine.auth.oauth2.AbstractAppEngineAuthorizationCodeCallbackServlet}.
 </p>

 <p>
 Upgrade warning: in version 1.15 there was an implementation of {@link #newJsonFactoryInstance()}
 that used {@code com.google.api.client.json.jackson.JacksonFactory}, but starting with version
 1.16 there is no such implementation.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.auth.AbstractAppEngineCallbackServlet -->
  <!-- start class com.google.api.client.extensions.appengine.auth.AbstractAppEngineFlowServlet -->
  <class name="AbstractAppEngineFlowServlet" extends="com.google.api.client.extensions.servlet.auth.AbstractFlowUserServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAppEngineFlowServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUserId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the user ID of the user that is logged in.

 @throws IllegalStateException Thrown when no user is logged in.]]>
      </doc>
    </method>
    <method name="newHttpTransportInstance" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 This class fills in some of the unknowns of the generic {@link AbstractFlowUserServlet} with
 reasonable defaults for App Engine. This servlet requires that the App Engine user must be logged
 in to work correctly.

 <p>
 Warning: starting with version 1.7, usage of this for OAuth 2.0 is deprecated. Instead use {@link
com.google.api.client.extensions.appengine.auth.oauth2.AbstractAppEngineAuthorizationCodeServlet}.
 </p>

 <p>
 Upgrade warning: in version 1.15 there was an implementation of {@link #newJsonFactoryInstance()}
 that used {@code com.google.api.client.json.jackson.JacksonFactory}, but starting with version
 1.16 there is no such implementation.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.auth.AbstractAppEngineFlowServlet -->
</package>
<package name="com.google.api.client.extensions.appengine.auth.oauth2">
  <!-- start class com.google.api.client.extensions.appengine.auth.oauth2.AbstractAppEngineAuthorizationCodeCallbackServlet -->
  <class name="AbstractAppEngineAuthorizationCodeCallbackServlet" extends="com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeCallbackServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAppEngineAuthorizationCodeCallbackServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUserId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Simple extension of {@link AbstractAuthorizationCodeCallbackServlet} that uses the currently
 logged-in Google Account user, as directed in <a
 href="http://code.google.com/appengine/docs/java/config/webxml.html#Security_and_Authentication">
 Security and Authentication</a>.

 <p>
 Note that if there is no currently logged-in user, {@link #getUserId(HttpServletRequest)} will
 throw a {@link NullPointerException}. Example to require login for all pages:
 </p>

 <pre>
  &lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;web-resource-name&gt;any&lt;/web-resource-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;*&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;
 </pre>

 <p>
 Sample usage:
 </p>

 <pre>
public class ServletCallbackSample extends AbstractAppEngineAuthorizationCodeCallbackServlet {

  &#64;Override
  protected void onSuccess(HttpServletRequest req, HttpServletResponse resp, Credential credential)
      throws ServletException, IOException {
    resp.sendRedirect("/");
  }

  &#64;Override
  protected void onError(
      HttpServletRequest req, HttpServletResponse resp, AuthorizationCodeResponseUrl errorResponse)
      throws ServletException, IOException {
    // handle error
  }

  &#64;Override
  protected String getRedirectUri(HttpServletRequest req) throws ServletException, IOException {
    GenericUrl url = new GenericUrl(req.getRequestURL().toString());
    url.setRawPath("/oauth2callback");
    return url.build();
  }

  &#64;Override
  protected AuthorizationCodeFlow initializeFlow() throws IOException {
    return new AuthorizationCodeFlow.Builder(BearerToken.authorizationHeaderAccessMethod(),
        new UrlFetchTransport(),
        new JacksonFactory(),
        new GenericUrl("https://server.example.com/token"),
        new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw"),
        "s6BhdRkqt3",
        "https://server.example.com/authorize").setCredentialStore(new AppEngineCredentialStore())
        .build();
  }
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.auth.oauth2.AbstractAppEngineAuthorizationCodeCallbackServlet -->
  <!-- start class com.google.api.client.extensions.appengine.auth.oauth2.AbstractAppEngineAuthorizationCodeServlet -->
  <class name="AbstractAppEngineAuthorizationCodeServlet" extends="com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAppEngineAuthorizationCodeServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUserId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Simple extension of {@link AbstractAuthorizationCodeServlet} that uses the currently logged-in
 Google Account user, as directed in <a
 href="http://code.google.com/appengine/docs/java/config/webxml.html#Security_and_Authentication">
 Security and Authentication</a>.

 <p>
 Note that if there is no currently logged-in user, {@link #getUserId(HttpServletRequest)} will
 throw a {@link NullPointerException}. Example to require login for all pages:
 </p>

 <pre>
  &lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;web-resource-name&gt;any&lt;/web-resource-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;*&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;
 </pre>

 <p>
 Sample usage:
 </p>

 <pre>
public class ServletSample extends AbstractAppEngineAuthorizationCodeServlet {

  &#64;Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    // do stuff
  }

  &#64;Override
  protected String getRedirectUri(HttpServletRequest req) throws ServletException, IOException {
    GenericUrl url = new GenericUrl(req.getRequestURL().toString());
    url.setRawPath("/oauth2callback");
    return url.build();
  }

  &#64;Override
  protected AuthorizationCodeFlow initializeFlow() throws IOException {
    return new AuthorizationCodeFlow.Builder(BearerToken.authorizationHeaderAccessMethod(),
        new UrlFetchTransport(),
        new JacksonFactory(),
        new GenericUrl("https://server.example.com/token"),
        new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw"),
        "s6BhdRkqt3",
        "https://server.example.com/authorize").setCredentialStore(new AppEngineCredentialStore())
        .build();
  }
}
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.auth.oauth2.AbstractAppEngineAuthorizationCodeServlet -->
  <!-- start class com.google.api.client.extensions.appengine.auth.oauth2.AppEngineCredentialStore -->
  <class name="AppEngineCredentialStore" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(to be removed in the future) Use {@link AppEngineDataStoreFactory} with
             {@link StoredCredential} instead,
             optionally using {@link #migrateTo(AppEngineDataStoreFactory)} or
             {@link #migrateTo(DataStore)} to migrating an existing
             {@link AppEngineCredentialStore}.">
    <implements name="com.google.api.client.auth.oauth2.CredentialStore"/>
    <constructor name="AppEngineCredentialStore"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="store"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
    </method>
    <method name="load" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
    </method>
    <method name="migrateTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="dataStoreFactory" type="AppEngineDataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Migrates to the new {@link AppEngineDataStoreFactory} format.

 <p>
 Sample usage:
 </p>

 <pre>
  public static AppEngineDataStore migrate(AppEngineCredentialStore credentialStore)
      throws IOException {
    AppEngineDataStore dataStore = new AppEngineDataStore();
    credentialStore.migrateTo(dataStore);
    return dataStore;
  }
 </pre>
 @param dataStoreFactory App Engine data store factory
 @since 1.16]]>
      </doc>
    </method>
    <method name="migrateTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="credentialDataStore" type="&lt;any&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Migrates to the new format using {@link DataStore} of {@link StoredCredential}.

 @param credentialDataStore credential data store
 @since 1.16]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe Google App Engine implementation of a credential store that directly uses the App
 Engine Data Store API.

 @since 1.7
 @author Yaniv Inbar
 @deprecated (to be removed in the future) Use {@link AppEngineDataStoreFactory} with
             {@link StoredCredential} instead,
             optionally using {@link #migrateTo(AppEngineDataStoreFactory)} or
             {@link #migrateTo(DataStore)} to migrating an existing
             {@link AppEngineCredentialStore}.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.auth.oauth2.AppEngineCredentialStore -->
</package>
<package name="com.google.api.client.extensions.auth.helpers">
  <!-- start interface com.google.api.client.extensions.auth.helpers.Credential -->
  <interface name="Credential"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="isInvalid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determine if the Credential is no longer valid, after being revoked for example.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Implementations of this class will have all of the information necessary to create and install
 the necessary handlers on an {@link HttpTransport} object to allow for a streamlined auth
 experience.

 Implementations of this interface should use the {@link PersistenceCapable} annotation to allow
 credentials to be managed on behalf of the application.

 <p>
 Warning: starting with version 1.7, usage of this for OAuth 2.0 is deprecated. Instead use
 {@link com.google.api.client.auth.oauth2.Credential}.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.extensions.auth.helpers.Credential -->
  <!-- start interface com.google.api.client.extensions.auth.helpers.ThreeLeggedFlow -->
  <interface name="ThreeLeggedFlow"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getAuthorizationUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[After the object is created, the developer should use this method to interrogate it for the
 authorization URL to which the user should be redirected to obtain permission.

 @return URL to which the user should be directed]]>
      </doc>
    </method>
    <method name="setHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[Set {@link HttpTransport} instance for this three legged flow.]]>
      </doc>
    </method>
    <method name="setJsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <doc>
      <![CDATA[Set {@link JsonFactory} instance for this three legged flow.]]>
      </doc>
    </method>
    <method name="loadCredential" return="com.google.api.client.extensions.auth.helpers.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pm" type="PersistenceManager"/>
      <doc>
      <![CDATA[Convenience function that will load a credential based on the userId for which this flow was
 instantiated.

 @param pm {@link PersistenceManager} instance which this flow should use to interact with the
        data store. The caller must remember to call {@link PersistenceManager#close()} after
        this method returns.
 @return Fully initialized {@link Credential} object or {@code null} if none exists.]]>
      </doc>
    </method>
    <method name="complete" return="com.google.api.client.extensions.auth.helpers.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationCode" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[After the user has authorized the request, the token or code obtained should be passed to this
 complete function to allow us to exchange the code with the authentication server for a
 {@link Credential}.

 @param authorizationCode Code or token obtained after the user grants permission
 @return {@link Credential} object that is obtained from token server]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Interface for auth flows that require a user authorization step through a web browser to obtain
 an authorization code.

 <p>
 Implementations are required to be {@link PersistenceCapable} for storage in JDO compliant
 datastores during user authorization step.
 </p>

 <p>
 Warning: starting with version 1.7, usage of this for OAuth 2.0 is deprecated. Instead use
 {@link com.google.api.client.auth.oauth2.AuthorizationCodeFlow}.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.extensions.auth.helpers.ThreeLeggedFlow -->
</package>
<package name="com.google.api.client.extensions.auth.helpers.oauth">
  <!-- start class com.google.api.client.extensions.auth.helpers.oauth.OAuthHmacCredential -->
  <class name="OAuthHmacCredential" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.extensions.auth.helpers.Credential"/>
    <constructor name="OAuthHmacCredential" type="java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an OAuth 1 credential object from information obtained from the server.

 @param userId User ID key that can be used to associate this credential with a user.
 @param consumerKey Key that identifies the server to the service provider.
 @param sharedSecret Secret that the server shares with the service provider.
 @param tokenSharedSecret Token secret that server uses to authenticate the requests.
 @param token Token that has been authorized by the end user to allow the server to access the
        resources or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="handleResponse" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <param name="response" type="HttpResponse"/>
      <param name="retrySupported" type="boolean"/>
    </method>
    <method name="jdoPreClear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="jdoPreDelete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="jdoPostLoad"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="jdoPreStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isInvalid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 OAuth 1 credential which uses the {@link OAuthHmacSigner} to sign requests.

 This class is both immutable and thread safe.

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.5]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.auth.helpers.oauth.OAuthHmacCredential -->
  <!-- start class com.google.api.client.extensions.auth.helpers.oauth.OAuthHmacThreeLeggedFlow -->
  <class name="OAuthHmacThreeLeggedFlow" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.extensions.auth.helpers.ThreeLeggedFlow"/>
    <constructor name="OAuthHmacThreeLeggedFlow" type="java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, HttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create an OAuthThreeLeggedFlow instance from the required information.

 @param userId Key that can be used to associate this flow with an end user.
 @param consumerKey Key that identifies the server to the service provider.
 @param consumerSecret Secret that is shared between the server and the service provider.
 @param authorizationServerUrl Url with which we communicate to authorize tis application.
 @param temporaryTokenUrl Url which we will use to obtain a temporary token.
 @param callbackUrl Url which the server should redirect the user to after obtaining
        authorization.

 @throws IOException Exception thrown when the flow is unable to communicate with the service
         provider.]]>
      </doc>
    </constructor>
    <method name="getAuthorizationUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="complete" return="com.google.api.client.extensions.auth.helpers.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationCode" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="loadCredential" return="com.google.api.client.extensions.auth.helpers.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pm" type="PersistenceManager"/>
    </method>
    <method name="setHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
    </method>
    <method name="setJsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 {@link ThreeLeggedFlow} implementation that will execute the proper requests to obtain an OAuth1
 Credential object that can be used to sign requests.

 <p>
 This class is not thread safe, nor should you attempt to execute a flow from multiple threads
 simultaneously.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.5]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.auth.helpers.oauth.OAuthHmacThreeLeggedFlow -->
</package>
<package name="com.google.api.client.extensions.java6.auth.oauth2">
  <!-- start class com.google.api.client.extensions.java6.auth.oauth2.AbstractPromptReceiver -->
  <class name="AbstractPromptReceiver" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver"/>
    <constructor name="AbstractPromptReceiver"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="waitForCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="stop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[OAuth 2.0 abstract verification code receiver that prompts user to paste the code copied from the
 browser.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.java6.auth.oauth2.AbstractPromptReceiver -->
  <!-- start class com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp -->
  <class name="AuthorizationCodeInstalledApp" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthorizationCodeInstalledApp" type="com.google.api.client.auth.oauth2.AuthorizationCodeFlow, com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param flow authorization code flow
 @param receiver verification code receiver]]>
      </doc>
    </constructor>
    <method name="authorize" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Authorizes the installed application to access user's protected data.

 @param userId user ID or {@code null} if not using a persisted credential store
 @return credential]]>
      </doc>
    </method>
    <method name="onAuthorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="authorizationUrl" type="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handles user authorization by redirecting to the OAuth 2.0 authorization server.

 <p>
 Default implementation is to call {@code browse(authorizationUrl.build())}. Subclasses may
 override to provide optional parameters such as the recommended state parameter. Sample
 implementation:
 </p>

 <pre>
  &#64;Override
  protected void onAuthorization(AuthorizationCodeRequestUrl authorizationUrl) throws IOException {
    authorizationUrl.setState("xyz");
    super.onAuthorization(authorizationUrl);
  }
 </pre>

 @param authorizationUrl authorization URL
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="browse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <doc>
      <![CDATA[Open a browser at the given URL using {@link Desktop} if available, or alternatively output the
 URL to {@link System#out} for command-line applications.

 @param url URL to browse]]>
      </doc>
    </method>
    <method name="getFlow" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization code flow.]]>
      </doc>
    </method>
    <method name="getReceiver" return="com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the verification code receiver.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 authorization code flow for an installed Java application that persists end-user
 credentials.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp -->
  <!-- start class com.google.api.client.extensions.java6.auth.oauth2.FileCredentialStore -->
  <class name="FileCredentialStore" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(to be removed in the future) Use {@link FileDataStoreFactory} with
             {@link StoredCredential} instead, optionally using
             {@link #migrateTo(FileDataStoreFactory)} or {@link #migrateTo(DataStore)} to
             migrating an existing {@link FileCredentialStore}.">
    <implements name="com.google.api.client.auth.oauth2.CredentialStore"/>
    <constructor name="FileCredentialStore" type="java.io.File, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param file File to store user credentials
 @param jsonFactory JSON factory to serialize user credentials]]>
      </doc>
    </constructor>
    <method name="isSymbolicLink" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns whether the given file is a symbolic link.

 @since 1.13]]>
      </doc>
    </method>
    <method name="store"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="load" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
    </method>
    <method name="migrateTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="dataStoreFactory" type="FileDataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Migrates to the new {@link FileDataStoreFactory} format.

 <p>
 Sample usage:
 </p>

 <pre>
  public static FileDataStore migrate(FileCredentialStore credentialStore, File dataDirectory)
      throws IOException {
    FileDataStore dataStore = new FileDataStore(dataDirectory);
    credentialStore.migrateTo(dataStore);
    return dataStore;
  }
 </pre>
 @param dataStoreFactory file data store factory
 @since 1.16]]>
      </doc>
    </method>
    <method name="migrateTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="credentialDataStore" type="&lt;any&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Migrates to the new format using {@link DataStore} of {@link StoredCredential}.

 @param credentialDataStore credential data store
 @since 1.16]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe file implementation of a credential store.

 @since 1.11
 @author Rafael Naufal
 @deprecated (to be removed in the future) Use {@link FileDataStoreFactory} with
             {@link StoredCredential} instead, optionally using
             {@link #migrateTo(FileDataStoreFactory)} or {@link #migrateTo(DataStore)} to
             migrating an existing {@link FileCredentialStore}.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.java6.auth.oauth2.FileCredentialStore -->
  <!-- start class com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredential -->
  <class name="FilePersistedCredential" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(to be removed in the future) Use {@link FileDataStoreFactory} instead.">
    <constructor name="FilePersistedCredential"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="set" return="com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Persisted credential implementation to be used exclusively with {@link FileCredentialStore}.

 @author Rafael Naufal
 @since 1.11
 @deprecated (to be removed in the future) Use {@link FileDataStoreFactory} instead.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredential -->
  <!-- start class com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredentials -->
  <class name="FilePersistedCredentials" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(to be removed in the future) Use {@link FileDataStoreFactory} instead.">
    <constructor name="FilePersistedCredentials"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="set" return="com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredentials"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredentials"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Persisted credential implementation to be used exclusively with {@link FileCredentialStore}.

 @author Rafael Naufal
 @since 1.11
 @deprecated (to be removed in the future) Use {@link FileDataStoreFactory} instead.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.java6.auth.oauth2.FilePersistedCredentials -->
  <!-- start interface com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver -->
  <interface name="VerificationCodeReceiver"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getRedirectUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the redirect URI.]]>
      </doc>
    </method>
    <method name="waitForCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Waits for a verification code.]]>
      </doc>
    </method>
    <method name="stop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Releases any resources and stops any processes started.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 verification code receiver.

 <p>
 Implementation should be thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver -->
</package>
<package name="com.google.api.client.extensions.jetty.auth.oauth2">
  <!-- start class com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver -->
  <class name="LocalServerReceiver" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver"/>
    <constructor name="LocalServerReceiver"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor that starts the server on {@code "localhost"} selects an unused port.

 <p>
 Use {@link Builder} if you need to specify any of the optional parameters.
 </p>]]>
      </doc>
    </constructor>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="waitForCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="stop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getHost" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the host name to use.]]>
      </doc>
    </method>
    <method name="getPort" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the port to use or {@code -1} to select an unused port in {@link #getRedirectUri()}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 verification code receiver that runs a Jetty server on a free port, waiting for a
 redirect with the verification code.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver -->
  <!-- start class com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver.Builder -->
  <class name="LocalServerReceiver.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalServerReceiver.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds the {@link LocalServerReceiver}.]]>
      </doc>
    </method>
    <method name="getHost" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the host name to use.]]>
      </doc>
    </method>
    <method name="setHost" return="com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="host" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the host name to use.]]>
      </doc>
    </method>
    <method name="getPort" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the port to use or {@code -1} to select an unused port.]]>
      </doc>
    </method>
    <method name="setPort" return="com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="port" type="int"/>
      <doc>
      <![CDATA[Sets the port to use or {@code -1} to select an unused port.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver.Builder -->
</package>
<package name="com.google.api.client.extensions.servlet.auth">
  <!-- start class com.google.api.client.extensions.servlet.auth.AbstractCallbackServlet -->
  <class name="AbstractCallbackServlet" extends="HttpServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractCallbackServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with will ask the concrete subclass for all required information on the
 environment.]]>
      </doc>
    </constructor>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the {@link JsonFactory} instance for this servlet.]]>
      </doc>
    </method>
    <method name="getHttpTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the {@link HttpTransport} instance for this servlet.]]>
      </doc>
    </method>
    <method name="getPersistenceManagerFactory" return="PersistenceManagerFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Override with your chosen method to get a PersistenceManagerFactory. For app engine
 applications this should be a singleton.

 @return PersistenceManagerFactory instance.]]>
      </doc>
    </method>
    <method name="getConcreteFlowType" return="java.lang.Class&lt;? extends com.google.api.client.extensions.auth.helpers.ThreeLeggedFlow&gt;"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Specific ThreeLeggedFlow type that this callback should retreieve and complete.]]>
      </doc>
    </method>
    <method name="getSuccessRedirectUrl" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Url to redirect the user to upon a successful credential exchange.]]>
      </doc>
    </method>
    <method name="getDeniedRedirectUrl" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Url to redirect the user to upon failure.]]>
      </doc>
    </method>
    <method name="getCompletionCodeQueryParam" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Specific query parameter keyword to key off of to get completion code. (e.g. "code" for
         OAuth2 and "verifier" for OAuth1)]]>
      </doc>
    </method>
    <method name="getUserId" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Get a string representation of a userId that can be used to associate credentials and
         flows with a specific user.]]>
      </doc>
    </method>
    <method name="newHttpTransportInstance" return="HttpTransport"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link HttpTransport} instance. Implementations can create any type of applicable
 transport and should be as simple as:

 <pre>
  new NetHttpTransport();
 </pre>

 @return {@link HttpTransport} instance for your particular environment]]>
      </doc>
    </method>
    <method name="newJsonFactoryInstance" return="JsonFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link JsonFactory} instance. Implementations can create any type of applicable
 json factory and should be as simple as:

 <pre>
  new JacksonFactory();
 </pre>

 @return {@link JsonFactory} instance for your particular environment]]>
      </doc>
    </method>
    <method name="doGet"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ServletException" type="ServletException"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Callback that will retrieve and complete a {@link ThreeLeggedFlow} when redirected to by a token
 server or service provider. Developer should subclass to provide the necessary information
 tailored to their specific use case.

 <p>
 Warning: starting with version 1.7, usage of this for OAuth 2.0 is deprecated. Instead use {@link
   com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeCallbackServlet}.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.servlet.auth.AbstractCallbackServlet -->
  <!-- start class com.google.api.client.extensions.servlet.auth.AbstractFlowUserServlet -->
  <class name="AbstractFlowUserServlet" extends="HttpServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractFlowUserServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="service"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ServletException" type="ServletException"/>
    </method>
    <method name="getCredential" return="com.google.api.client.extensions.auth.helpers.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <doc>
      <![CDATA[Fetch a credential associated with this request.

 @param req Request object to use as context for fetching the credential.
 @return Credential object for this request and user.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the {@link JsonFactory} instance for this servlet.]]>
      </doc>
    </method>
    <method name="getHttpTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the {@link HttpTransport} instance for this servlet.]]>
      </doc>
    </method>
    <method name="getPersistenceManagerFactory" return="PersistenceManagerFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Obtain a PersistenceManagerFactory for working with the datastore.

 @return PersistenceManagerFactory instance.]]>
      </doc>
    </method>
    <method name="newFlow" return="com.google.api.client.extensions.auth.helpers.ThreeLeggedFlow"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create a flow object which will be used to obtain credentials.

 @param userId User id to be passed to the constructor of the flow object
 @return Flow object used to obtain credentials]]>
      </doc>
    </method>
    <method name="newHttpTransportInstance" return="HttpTransport"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link HttpTransport} instance. Implementations can create any type of applicable
 transport and should be as simple as:

 <pre>
  new NetHttpTransport();
 </pre>

 @return {@link HttpTransport} instance for your particular environment]]>
      </doc>
    </method>
    <method name="newJsonFactoryInstance" return="JsonFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link JsonFactory} instance. Implementations can create any type of applicable
 json factory and should be as simple as:

 <pre>
  new JacksonFactory();
 </pre>

 @return {@link JsonFactory} instance for your particular environment]]>
      </doc>
    </method>
    <method name="getUserId" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Get a string representation of a userId that can be used to associate credentials and
         flows with a specific user.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Servlet that can be used to invoke and manage a {@link ThreeLeggedFlow} object in the App Engine
 container. Developers should subclass this to provide the necessary information for their
 specific use case.

 <p>
 Warning: starting with version 1.7, usage of this for OAuth 2.0 is deprecated. Instead use {@link
    com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeServlet}.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.servlet.auth.AbstractFlowUserServlet -->
</package>
<package name="com.google.api.client.extensions.servlet.auth.oauth2">
  <!-- start class com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeCallbackServlet -->
  <class name="AbstractAuthorizationCodeCallbackServlet" extends="HttpServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAuthorizationCodeCallbackServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="doGet"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="initializeFlow" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the authorization code flow to be used across all HTTP servlet requests (only called
 during the first HTTP servlet request with an authorization code).]]>
      </doc>
    </method>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the redirect URI for the given HTTP servlet request.]]>
      </doc>
    </method>
    <method name="getUserId" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the user ID for the given HTTP servlet request.]]>
      </doc>
    </method>
    <method name="onSuccess"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <param name="credential" type="com.google.api.client.auth.oauth2.Credential"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handles a successfully granted authorization.

 <p>
 Default implementation is to do nothing, but subclasses should override and implement. Sample
 implementation:
 </p>

 <pre>
      resp.sendRedirect("/granted");
 </pre>

 @param req HTTP servlet request
 @param resp HTTP servlet response
 @param credential credential
 @throws ServletException HTTP servlet exception
 @throws IOException some I/O exception]]>
      </doc>
    </method>
    <method name="onError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <param name="errorResponse" type="com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handles an error to the authorization, such as when an end user denies authorization.

 <p>
 Default implementation is to do nothing, but subclasses should override and implement. Sample
 implementation:
 </p>

 <pre>
      resp.sendRedirect("/denied");
 </pre>

 @param req HTTP servlet request
 @param resp HTTP servlet response
 @param errorResponse error response ({@link AuthorizationCodeResponseUrl#getError()} is not
        {@code null})
 @throws ServletException HTTP servlet exception
 @throws IOException some I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe OAuth 2.0 authorization code callback servlet to process the authorization code or
 error response from authorization page redirect.

 <p>
 This is designed to simplify the flow in which an end-user authorizes your web application to
 access their protected data. The main servlet class extends
 {@link AbstractAuthorizationCodeServlet} which if the end-user credentials are not found, will
 redirect the end-user to an authorization page. If the end-user grants authorization, they will
 be redirected to this servlet that extends {@link AbstractAuthorizationCodeCallbackServlet} and
 the {@link #onSuccess} will be called. Similarly, if the end-user grants authorization, they will
 be redirected to this servlet and {@link #onError} will be called.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
public class ServletCallbackSample extends AbstractAuthorizationCodeCallbackServlet {

  &#64;Override
  protected void onSuccess(HttpServletRequest req, HttpServletResponse resp, Credential credential)
      throws ServletException, IOException {
    resp.sendRedirect("/");
  }

  &#64;Override
  protected void onError(
      HttpServletRequest req, HttpServletResponse resp, AuthorizationCodeResponseUrl errorResponse)
      throws ServletException, IOException {
    // handle error
  }

  &#64;Override
  protected String getRedirectUri(HttpServletRequest req) throws ServletException, IOException {
    GenericUrl url = new GenericUrl(req.getRequestURL().toString());
    url.setRawPath("/oauth2callback");
    return url.build();
  }

  &#64;Override
  protected AuthorizationCodeFlow initializeFlow() throws IOException {
    return new AuthorizationCodeFlow.Builder(BearerToken.authorizationHeaderAccessMethod(),
        new NetHttpTransport(),
        new JacksonFactory(),
        new GenericUrl("https://server.example.com/token"),
        new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw"),
        "s6BhdRkqt3",
        "https://server.example.com/authorize").setCredentialStore(
        new JdoCredentialStore(JDOHelper.getPersistenceManagerFactory("transactions-optional")))
        .build();
  }

  &#64;Override
  protected String getUserId(HttpServletRequest req) throws ServletException, IOException {
    // return user ID
  }
}
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeCallbackServlet -->
  <!-- start class com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeServlet -->
  <class name="AbstractAuthorizationCodeServlet" extends="HttpServlet"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAuthorizationCodeServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="service"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ServletException" type="ServletException"/>
    </method>
    <method name="initializeFlow" return="com.google.api.client.auth.oauth2.AuthorizationCodeFlow"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the authorization code flow to be used across all HTTP servlet requests (only called
 during the first HTTP servlet request).]]>
      </doc>
    </method>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the redirect URI for the given HTTP servlet request.]]>
      </doc>
    </method>
    <method name="getUserId" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the user ID for the given HTTP servlet request.]]>
      </doc>
    </method>
    <method name="getCredential" return="com.google.api.client.auth.oauth2.Credential"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the persisted credential associated with the current request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="onAuthorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <param name="authorizationUrl" type="com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handles user authorization by redirecting to the OAuth 2.0 authorization server.

 <p>
 Default implementation is to call {@code resp.sendRedirect(authorizationUrl.build())}.
 Subclasses may override to provide optional parameters such as the recommended state parameter.
 Sample implementation:
 </p>

 <pre>
  &#64;Override
  protected void onAuthorization(HttpServletRequest req, HttpServletResponse resp,
      AuthorizationCodeRequestUrl authorizationUrl) throws ServletException, IOException {
    authorizationUrl.setState("xyz");
    super.onAuthorization(req, resp, authorizationUrl);
  }
 </pre>

 @param authorizationUrl authorization code request URL
 @param req HTTP servlet request
 @throws ServletException servlet exception
 @since 1.11]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe OAuth 2.0 authorization code flow HTTP servlet that manages and persists end-user
 credentials.

 <p>
 This is designed to simplify the flow in which an end-user authorizes your web application to
 access their protected data. Your application then has access to their data based on an access
 token and a refresh token to refresh that access token when it expires. Your main servlet class
 should extend {@link AbstractAuthorizationCodeServlet} and implement the abstract methods. To get
 the persisted credential associated with the current request, call {@link #getCredential()}. It
 is assumed that the end-user is authenticated by some external means by which a user ID is
 obtained. This user ID is used as the primary key for persisting the end-user credentials, and
 passed in via {@link #getUserId(HttpServletRequest)}. The first time an end-user arrives at your
 servlet, they will be redirected in the browser to an authorization page. Next, they will be
 redirected back to your site at the redirect URI selected in
 {@link #getRedirectUri(HttpServletRequest)}. The servlet to process that should extend
 {@link AbstractAuthorizationCodeCallbackServlet}, which should redirect back to this servlet on
 success.
 </p>

 <p>
 Although this implementation is thread-safe, it can only process one request at a time. For a
 more performance-critical multi-threaded web application, instead use
 {@link AuthorizationCodeFlow} directly.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
public class ServletSample extends AbstractAuthorizationCodeServlet {

  &#64;Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    // do stuff
  }

  &#64;Override
  protected String getRedirectUri(HttpServletRequest req) throws ServletException, IOException {
    GenericUrl url = new GenericUrl(req.getRequestURL().toString());
    url.setRawPath("/oauth2callback");
    return url.build();
  }

  &#64;Override
  protected AuthorizationCodeFlow initializeFlow() throws IOException {
    return new AuthorizationCodeFlow.Builder(BearerToken.authorizationHeaderAccessMethod(),
        new NetHttpTransport(),
        new JacksonFactory(),
        new GenericUrl("https://server.example.com/token"),
        new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw"),
        "s6BhdRkqt3",
        "https://server.example.com/authorize").setCredentialStore(
        new JdoCredentialStore(JDOHelper.getPersistenceManagerFactory("transactions-optional")))
        .build();
  }

  &#64;Override
  protected String getUserId(HttpServletRequest req) throws ServletException, IOException {
    // return user ID
  }
}
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.servlet.auth.oauth2.AbstractAuthorizationCodeServlet -->
</package>

</api>
